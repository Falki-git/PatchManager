//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/arall/PatchManager/src/PatchManager.SassyPatching/SassyPatchGrammar\sassy_parser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SassyPatchGrammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class sassy_parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, SPACE=2, USE=3, FUNCTION=4, PRE_IF=5, PRE_ELSE=6, PRE_ELSE_IF=7, 
		MIXIN=8, WHILE=9, SET=10, MERGE=11, REQUIRE=12, REQUIRE_NOT=13, STAGE=14, 
		DEFINE_STAGE=15, INCLUDE=16, RETURN=17, LEFT_BRACE=18, RIGHT_BRACE=19, 
		LEFT_PAREN=20, RIGHT_PAREN=21, LEFT_BRACKET=22, RIGHT_BRACKET=23, SEMICOLON=24, 
		COLON=25, COMMA=26, ADD=27, SUBTRACT=28, MULTIPLY=29, DIVIDE=30, MODULUS=31, 
		NOT=32, GREATER_THAN=33, GREATER_THAN_EQUAL=34, LESSER_THAN=35, LESSER_THAN_EQUAL=36, 
		EQUAL_TO=37, NOT_EQUAL_TO=38, AND=39, OR=40, IF=41, ELSE=42, WITHOUT=43, 
		NONE=44, TRUE=45, FALSE=46, HEX_NUMBER=47, NUMBER=48, STRING=49, DELETE=50, 
		NAME=51, CLASS=52, VARIABLE=53, RULESET=54, ELEMENT=55;
	public const int
		RULE_patch = 0, RULE_top_level_statement = 1, RULE_import_declaration = 2, 
		RULE_var_decl = 3, RULE_stage_def = 4, RULE_function_def = 5, RULE_mixin_def = 6, 
		RULE_top_level_conditional = 7, RULE_top_level_else = 8, RULE_top_level_else_else = 9, 
		RULE_top_level_else_if = 10, RULE_selection_block = 11, RULE_attributed_selector = 12, 
		RULE_attribute = 13, RULE_selector = 14, RULE_selector_no_children = 15, 
		RULE_selector_body = 16, RULE_selector_statement = 17, RULE_sel_level_conditional = 18, 
		RULE_sel_level_else = 19, RULE_sel_level_else_else = 20, RULE_sel_level_else_if = 21, 
		RULE_set_value = 22, RULE_delete_value = 23, RULE_merge_value = 24, RULE_field_set = 25, 
		RULE_index = 26, RULE_expression = 27, RULE_sub_expression = 28, RULE_value = 29, 
		RULE_list = 30, RULE_list_values = 31, RULE_obj = 32, RULE_obj_values = 33, 
		RULE_key_value = 34, RULE_argument_list = 35, RULE_argument = 36, RULE_arg_decl_list = 37, 
		RULE_arg_decl = 38, RULE_function_body = 39, RULE_function_statement = 40, 
		RULE_fn_level_conditional = 41, RULE_fn_level_else = 42, RULE_fn_level_else_else = 43, 
		RULE_fn_level_else_if = 44, RULE_fn_return = 45, RULE_mixin_include = 46;
	public static readonly string[] ruleNames = {
		"patch", "top_level_statement", "import_declaration", "var_decl", "stage_def", 
		"function_def", "mixin_def", "top_level_conditional", "top_level_else", 
		"top_level_else_else", "top_level_else_if", "selection_block", "attributed_selector", 
		"attribute", "selector", "selector_no_children", "selector_body", "selector_statement", 
		"sel_level_conditional", "sel_level_else", "sel_level_else_else", "sel_level_else_if", 
		"set_value", "delete_value", "merge_value", "field_set", "index", "expression", 
		"sub_expression", "value", "list", "list_values", "obj", "obj_values", 
		"key_value", "argument_list", "argument", "arg_decl_list", "arg_decl", 
		"function_body", "function_statement", "fn_level_conditional", "fn_level_else", 
		"fn_level_else_else", "fn_level_else_if", "fn_return", "mixin_include"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'@use'", "'@function'", "'@if'", "'@else'", "'@else-if'", 
		"'@mixin'", "'@while'", "'@set'", "'@merge'", "'@require'", "'@require-not'", 
		"'@stage'", "'@define-stage'", "'@include'", "'@return'", "'{'", "'}'", 
		"'('", "')'", "'['", "']'", "';'", "':'", "','", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'!'", "'>'", "'>='", "'<'", "'<='", "'='", "'!='", "'and'", 
		"'or'", "'if'", "'else'", "'~'", "'null'", "'true'", "'false'", null, 
		null, null, "'@delete'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "SPACE", "USE", "FUNCTION", "PRE_IF", "PRE_ELSE", "PRE_ELSE_IF", 
		"MIXIN", "WHILE", "SET", "MERGE", "REQUIRE", "REQUIRE_NOT", "STAGE", "DEFINE_STAGE", 
		"INCLUDE", "RETURN", "LEFT_BRACE", "RIGHT_BRACE", "LEFT_PAREN", "RIGHT_PAREN", 
		"LEFT_BRACKET", "RIGHT_BRACKET", "SEMICOLON", "COLON", "COMMA", "ADD", 
		"SUBTRACT", "MULTIPLY", "DIVIDE", "MODULUS", "NOT", "GREATER_THAN", "GREATER_THAN_EQUAL", 
		"LESSER_THAN", "LESSER_THAN_EQUAL", "EQUAL_TO", "NOT_EQUAL_TO", "AND", 
		"OR", "IF", "ELSE", "WITHOUT", "NONE", "TRUE", "FALSE", "HEX_NUMBER", 
		"NUMBER", "STRING", "DELETE", "NAME", "CLASS", "VARIABLE", "RULESET", 
		"ELEMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "sassy_parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static sassy_parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public sassy_parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public sassy_parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(sassy_parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public PatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterPatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitPatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatchContext patch() {
		PatchContext _localctx = new PatchContext(Context, State);
		EnterRule(_localctx, 0, RULE_patch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 94;
				top_level_statement();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 69814590989463864L) != 0) );
			State = 99;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_declarationContext import_declaration() {
			return GetRuleContext<Import_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stage_defContext stage_def() {
			return GetRuleContext<Stage_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_defContext function_def() {
			return GetRuleContext<Function_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mixin_defContext mixin_def() {
			return GetRuleContext<Mixin_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_conditionalContext top_level_conditional() {
			return GetRuleContext<Top_level_conditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selection_blockContext selection_block() {
			return GetRuleContext<Selection_blockContext>(0);
		}
		public Top_level_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_statementContext top_level_statement() {
		Top_level_statementContext _localctx = new Top_level_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_top_level_statement);
		try {
			State = 108;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 101;
				import_declaration();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102;
				var_decl();
				}
				break;
			case DEFINE_STAGE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 103;
				stage_def();
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 104;
				function_def();
				}
				break;
			case MIXIN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 105;
				mixin_def();
				}
				break;
			case PRE_IF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 106;
				top_level_conditional();
				}
				break;
			case REQUIRE:
			case REQUIRE_NOT:
			case STAGE:
			case LEFT_PAREN:
			case ADD:
			case MULTIPLY:
			case WITHOUT:
			case NAME:
			case CLASS:
			case RULESET:
			case ELEMENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 107;
				selection_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_declarationContext : ParserRuleContext {
		public IToken imp;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(sassy_parser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Import_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImport_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImport_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_declarationContext import_declaration() {
		Import_declarationContext _localctx = new Import_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_import_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(USE);
			State = 111;
			_localctx.imp = Match(STRING);
			State = 112;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		public IToken variable;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterVar_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitVar_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 6, RULE_var_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			_localctx.variable = Match(VARIABLE);
			State = 115;
			Match(COLON);
			State = 116;
			_localctx.val = expression();
			State = 117;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stage_defContext : ParserRuleContext {
		public IToken stage;
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE_STAGE() { return GetToken(sassy_parser.DEFINE_STAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(sassy_parser.NUMBER, 0); }
		public Stage_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterStage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitStage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStage_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stage_defContext stage_def() {
		Stage_defContext _localctx = new Stage_defContext(Context, State);
		EnterRule(_localctx, 8, RULE_stage_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(DEFINE_STAGE);
			State = 120;
			_localctx.stage = Match(STRING);
			State = 121;
			Match(COMMA);
			State = 122;
			_localctx.priority = Match(NUMBER);
			State = 123;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_defContext : ParserRuleContext {
		public IToken name;
		public Arg_decl_listContext args;
		public Function_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(sassy_parser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_decl_listContext arg_decl_list() {
			return GetRuleContext<Arg_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public Function_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFunction_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFunction_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_defContext function_def() {
		Function_defContext _localctx = new Function_defContext(Context, State);
		EnterRule(_localctx, 10, RULE_function_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(FUNCTION);
			State = 126;
			_localctx.name = Match(ELEMENT);
			State = 127;
			Match(LEFT_PAREN);
			State = 128;
			_localctx.args = arg_decl_list();
			State = 129;
			Match(RIGHT_PAREN);
			State = 130;
			Match(LEFT_BRACE);
			State = 131;
			_localctx.body = function_body();
			State = 132;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixin_defContext : ParserRuleContext {
		public IToken name;
		public Arg_decl_listContext args;
		public Selector_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIXIN() { return GetToken(sassy_parser.MIXIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_decl_listContext arg_decl_list() {
			return GetRuleContext<Arg_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_bodyContext selector_body() {
			return GetRuleContext<Selector_bodyContext>(0);
		}
		public Mixin_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixin_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMixin_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMixin_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMixin_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mixin_defContext mixin_def() {
		Mixin_defContext _localctx = new Mixin_defContext(Context, State);
		EnterRule(_localctx, 12, RULE_mixin_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(MIXIN);
			State = 135;
			_localctx.name = Match(ELEMENT);
			State = 136;
			Match(LEFT_PAREN);
			State = 137;
			_localctx.args = arg_decl_list();
			State = 138;
			Match(RIGHT_PAREN);
			State = 139;
			Match(LEFT_BRACE);
			State = 140;
			_localctx.body = selector_body();
			State = 141;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_conditionalContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Top_level_statementContext body;
		public Top_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_IF() { return GetToken(sassy_parser.PRE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_elseContext top_level_else() {
			return GetRuleContext<Top_level_elseContext>(0);
		}
		public Top_level_conditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_conditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_conditionalContext top_level_conditional() {
		Top_level_conditionalContext _localctx = new Top_level_conditionalContext(Context, State);
		EnterRule(_localctx, 14, RULE_top_level_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			Match(PRE_IF);
			State = 144;
			_localctx.cond = sub_expression(0);
			State = 145;
			Match(LEFT_BRACE);
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 69814590989463864L) != 0)) {
				{
				{
				State = 146;
				_localctx.body = top_level_statement();
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 152;
			Match(RIGHT_BRACE);
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 153;
				_localctx.els = top_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_else_elseContext top_level_else_else() {
			return GetRuleContext<Top_level_else_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_else_ifContext top_level_else_if() {
			return GetRuleContext<Top_level_else_ifContext>(0);
		}
		public Top_level_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_elseContext top_level_else() {
		Top_level_elseContext _localctx = new Top_level_elseContext(Context, State);
		EnterRule(_localctx, 16, RULE_top_level_else);
		try {
			State = 158;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRE_ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 156;
				top_level_else_else();
				}
				break;
			case PRE_ELSE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 157;
				top_level_else_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_else_elseContext : ParserRuleContext {
		public Top_level_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE() { return GetToken(sassy_parser.PRE_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public Top_level_else_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_else_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_else_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_else_elseContext top_level_else_else() {
		Top_level_else_elseContext _localctx = new Top_level_else_elseContext(Context, State);
		EnterRule(_localctx, 18, RULE_top_level_else_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(PRE_ELSE);
			State = 161;
			Match(LEFT_BRACE);
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 69814590989463864L) != 0)) {
				{
				{
				State = 162;
				_localctx.body = top_level_statement();
				}
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 168;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_else_ifContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Top_level_statementContext body;
		public Top_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE_IF() { return GetToken(sassy_parser.PRE_ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_elseContext top_level_else() {
			return GetRuleContext<Top_level_elseContext>(0);
		}
		public Top_level_else_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_else_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_else_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_else_ifContext top_level_else_if() {
		Top_level_else_ifContext _localctx = new Top_level_else_ifContext(Context, State);
		EnterRule(_localctx, 20, RULE_top_level_else_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(PRE_ELSE_IF);
			State = 171;
			_localctx.cond = sub_expression(0);
			State = 172;
			Match(LEFT_BRACE);
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 69814590989463864L) != 0)) {
				{
				{
				State = 173;
				_localctx.body = top_level_statement();
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 179;
			Match(RIGHT_BRACE);
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 180;
				_localctx.els = top_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Attributed_selectorContext attributed_selector() {
			return GetRuleContext<Attributed_selectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_bodyContext selector_body() {
			return GetRuleContext<Selector_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		public Selection_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSelection_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSelection_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selection_blockContext selection_block() {
		Selection_blockContext _localctx = new Selection_blockContext(Context, State);
		EnterRule(_localctx, 22, RULE_selection_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			attributed_selector();
			State = 184;
			Match(LEFT_BRACE);
			State = 185;
			selector_body();
			State = 186;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attributed_selectorContext : ParserRuleContext {
		public AttributeContext attributes;
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Attributed_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributed_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAttributed_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAttributed_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributed_selector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attributed_selectorContext attributed_selector() {
		Attributed_selectorContext _localctx = new Attributed_selectorContext(Context, State);
		EnterRule(_localctx, 24, RULE_attributed_selector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 28672L) != 0)) {
				{
				{
				State = 188;
				_localctx.attributes = attribute();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 194;
			selector(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
	 
		public AttributeContext() { }
		public virtual void CopyFrom(AttributeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Run_at_stageContext : AttributeContext {
		public IToken stage;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAGE() { return GetToken(sassy_parser.STAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Run_at_stageContext(AttributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRun_at_stage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRun_at_stage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRun_at_stage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_not_modContext : AttributeContext {
		public IToken guid;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_NOT() { return GetToken(sassy_parser.REQUIRE_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Require_not_modContext(AttributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_not_mod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_not_mod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_not_mod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_modContext : AttributeContext {
		public IToken guid;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(sassy_parser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Require_modContext(AttributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_mod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_mod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_mod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 26, RULE_attribute);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REQUIRE:
				_localctx = new Require_modContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 196;
				Match(REQUIRE);
				State = 197;
				((Require_modContext)_localctx).guid = Match(STRING);
				}
				break;
			case REQUIRE_NOT:
				_localctx = new Require_not_modContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 198;
				Match(REQUIRE_NOT);
				State = 199;
				((Require_not_modContext)_localctx).guid = Match(STRING);
				}
				break;
			case STAGE:
				_localctx = new Run_at_stageContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 200;
				Match(STAGE);
				State = 201;
				((Run_at_stageContext)_localctx).stage = Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
	 
		public SelectorContext() { }
		public virtual void CopyFrom(SelectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Sel_elementContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Sel_elementContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_rulesetContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULESET() { return GetToken(sassy_parser.RULESET, 0); }
		public Sel_rulesetContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_ruleset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_ruleset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_ruleset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_childContext : SelectorContext {
		public SelectorContext parent;
		public Selector_no_childrenContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(sassy_parser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sel_childContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_child(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_child(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_child(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_add_elementContext : SelectorContext {
		public IToken element;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Sel_add_elementContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_add_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_add_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_add_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_classContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Sel_classContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_nameContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public Sel_nameContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_intersectionContext : SelectorContext {
		public SelectorContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sel_intersectionContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_intersection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_intersection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_intersection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_everythingContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		public Sel_everythingContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_everything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_everything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_everything(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_without_classContext : SelectorContext {
		public IToken field;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Sel_without_classContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_without_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_without_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_without_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_without_nameContext : SelectorContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public Sel_without_nameContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_without_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_without_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_without_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_combinationContext : SelectorContext {
		public SelectorContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sel_combinationContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_combination(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_combination(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_combination(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_subContext : SelectorContext {
		public SelectorContext internal_selector;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public Sel_subContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_sub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		return selector(0);
	}

	private SelectorContext selector(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SelectorContext _localctx = new SelectorContext(Context, _parentState);
		SelectorContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_selector, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new Sel_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 205;
				Match(ELEMENT);
				}
				break;
			case 2:
				{
				_localctx = new Sel_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 206;
				Match(CLASS);
				}
				break;
			case 3:
				{
				_localctx = new Sel_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 207;
				Match(NAME);
				}
				break;
			case 4:
				{
				_localctx = new Sel_rulesetContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 208;
				Match(RULESET);
				}
				break;
			case 5:
				{
				_localctx = new Sel_subContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 209;
				Match(LEFT_PAREN);
				State = 210;
				((Sel_subContext)_localctx).internal_selector = selector(0);
				State = 211;
				Match(RIGHT_PAREN);
				}
				break;
			case 6:
				{
				_localctx = new Sel_add_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 213;
				Match(ADD);
				State = 214;
				((Sel_add_elementContext)_localctx).element = Match(ELEMENT);
				}
				break;
			case 7:
				{
				_localctx = new Sel_without_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 215;
				Match(WITHOUT);
				State = 216;
				((Sel_without_classContext)_localctx).field = Match(CLASS);
				}
				break;
			case 8:
				{
				_localctx = new Sel_without_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 217;
				Match(WITHOUT);
				State = 218;
				((Sel_without_nameContext)_localctx).name = Match(NAME);
				}
				break;
			case 9:
				{
				_localctx = new Sel_everythingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 219;
				Match(MULTIPLY);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 232;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 230;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new Sel_combinationContext(new SelectorContext(_parentctx, _parentState));
						((Sel_combinationContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector);
						State = 222;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 223;
						Match(COMMA);
						State = 224;
						((Sel_combinationContext)_localctx).rhs = selector_no_children(0);
						}
						break;
					case 2:
						{
						_localctx = new Sel_childContext(new SelectorContext(_parentctx, _parentState));
						((Sel_childContext)_localctx).parent = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector);
						State = 225;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 226;
						Match(GREATER_THAN);
						State = 227;
						((Sel_childContext)_localctx).child = selector_no_children(0);
						}
						break;
					case 3:
						{
						_localctx = new Sel_intersectionContext(new SelectorContext(_parentctx, _parentState));
						((Sel_intersectionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector);
						State = 228;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 229;
						((Sel_intersectionContext)_localctx).rhs = selector_no_children(0);
						}
						break;
					}
					} 
				}
				State = 234;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Selector_no_childrenContext : ParserRuleContext {
		public Selector_no_childrenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_no_children; } }
	 
		public Selector_no_childrenContext() { }
		public virtual void CopyFrom(Selector_no_childrenContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Ruleset_selectorContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULESET() { return GetToken(sassy_parser.RULESET, 0); }
		public Ruleset_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRuleset_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRuleset_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleset_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Combination_selectorContext : Selector_no_childrenContext {
		public Selector_no_childrenContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext[] selector_no_children() {
			return GetRuleContexts<Selector_no_childrenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children(int i) {
			return GetRuleContext<Selector_no_childrenContext>(i);
		}
		public Combination_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterCombination_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitCombination_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombination_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Without_nameContext : Selector_no_childrenContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public Without_nameContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterWithout_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitWithout_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithout_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sub_selectorContext : Selector_no_childrenContext {
		public Selector_no_childrenContext internal_selector;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sub_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSub_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSub_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Class_selectorContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Class_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterClass_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitClass_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Without_classContext : Selector_no_childrenContext {
		public IToken field;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Without_classContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterWithout_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitWithout_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithout_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public NameContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Add_elementContext : Selector_no_childrenContext {
		public IToken element;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Add_elementContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAdd_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAdd_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EverythingContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		public EverythingContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterEverything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitEverything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEverything(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Intersection_selectorContext : Selector_no_childrenContext {
		public Selector_no_childrenContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext[] selector_no_children() {
			return GetRuleContexts<Selector_no_childrenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children(int i) {
			return GetRuleContext<Selector_no_childrenContext>(i);
		}
		public Intersection_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterIntersection_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitIntersection_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntersection_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElementContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public ElementContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selector_no_childrenContext selector_no_children() {
		return selector_no_children(0);
	}

	private Selector_no_childrenContext selector_no_children(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Selector_no_childrenContext _localctx = new Selector_no_childrenContext(Context, _parentState);
		Selector_no_childrenContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_selector_no_children, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				_localctx = new ElementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 236;
				Match(ELEMENT);
				}
				break;
			case 2:
				{
				_localctx = new Class_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 237;
				Match(CLASS);
				}
				break;
			case 3:
				{
				_localctx = new NameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 238;
				Match(NAME);
				}
				break;
			case 4:
				{
				_localctx = new Ruleset_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 239;
				Match(RULESET);
				}
				break;
			case 5:
				{
				_localctx = new Sub_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 240;
				Match(LEFT_PAREN);
				State = 241;
				((Sub_selectorContext)_localctx).internal_selector = selector_no_children(0);
				State = 242;
				Match(RIGHT_PAREN);
				}
				break;
			case 6:
				{
				_localctx = new Add_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 244;
				Match(ADD);
				State = 245;
				((Add_elementContext)_localctx).element = Match(ELEMENT);
				}
				break;
			case 7:
				{
				_localctx = new Without_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 246;
				Match(WITHOUT);
				State = 247;
				((Without_classContext)_localctx).field = Match(CLASS);
				}
				break;
			case 8:
				{
				_localctx = new Without_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 248;
				Match(WITHOUT);
				State = 249;
				((Without_nameContext)_localctx).name = Match(NAME);
				}
				break;
			case 9:
				{
				_localctx = new EverythingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 250;
				Match(MULTIPLY);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 260;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 258;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new Combination_selectorContext(new Selector_no_childrenContext(_parentctx, _parentState));
						((Combination_selectorContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector_no_children);
						State = 253;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 254;
						Match(COMMA);
						State = 255;
						((Combination_selectorContext)_localctx).rhs = selector_no_children(7);
						}
						break;
					case 2:
						{
						_localctx = new Intersection_selectorContext(new Selector_no_childrenContext(_parentctx, _parentState));
						((Intersection_selectorContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector_no_children);
						State = 256;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 257;
						((Intersection_selectorContext)_localctx).rhs = selector_no_children(6);
						}
						break;
					}
					} 
				}
				State = 262;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Selector_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		public Selector_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSelector_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSelector_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selector_bodyContext selector_body() {
		Selector_bodyContext _localctx = new Selector_bodyContext(Context, State);
		EnterRule(_localctx, 32, RULE_selector_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 71503440849763360L) != 0)) {
				{
				{
				State = 263;
				selector_statement();
				}
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selector_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_conditionalContext sel_level_conditional() {
			return GetRuleContext<Sel_level_conditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_valueContext set_value() {
			return GetRuleContext<Set_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_valueContext delete_value() {
			return GetRuleContext<Delete_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_valueContext merge_value() {
			return GetRuleContext<Merge_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_setContext field_set() {
			return GetRuleContext<Field_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selection_blockContext selection_block() {
			return GetRuleContext<Selection_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mixin_includeContext mixin_include() {
			return GetRuleContext<Mixin_includeContext>(0);
		}
		public Selector_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSelector_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSelector_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selector_statementContext selector_statement() {
		Selector_statementContext _localctx = new Selector_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_selector_statement);
		try {
			State = 277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 269;
				var_decl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 270;
				sel_level_conditional();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 271;
				set_value();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 272;
				delete_value();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 273;
				merge_value();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 274;
				field_set();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 275;
				selection_block();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 276;
				mixin_include();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_conditionalContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Selector_statementContext body;
		public Sel_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_IF() { return GetToken(sassy_parser.PRE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_elseContext sel_level_else() {
			return GetRuleContext<Sel_level_elseContext>(0);
		}
		public Sel_level_conditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_conditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_conditionalContext sel_level_conditional() {
		Sel_level_conditionalContext _localctx = new Sel_level_conditionalContext(Context, State);
		EnterRule(_localctx, 36, RULE_sel_level_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(PRE_IF);
			State = 280;
			_localctx.cond = sub_expression(0);
			State = 281;
			Match(LEFT_BRACE);
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 71503440849763360L) != 0)) {
				{
				{
				State = 282;
				_localctx.body = selector_statement();
				}
				}
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 288;
			Match(RIGHT_BRACE);
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 289;
				_localctx.els = sel_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_else_elseContext sel_level_else_else() {
			return GetRuleContext<Sel_level_else_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_else_ifContext sel_level_else_if() {
			return GetRuleContext<Sel_level_else_ifContext>(0);
		}
		public Sel_level_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_elseContext sel_level_else() {
		Sel_level_elseContext _localctx = new Sel_level_elseContext(Context, State);
		EnterRule(_localctx, 38, RULE_sel_level_else);
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRE_ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292;
				sel_level_else_else();
				}
				break;
			case PRE_ELSE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293;
				sel_level_else_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_else_elseContext : ParserRuleContext {
		public Selector_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE() { return GetToken(sassy_parser.PRE_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		public Sel_level_else_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_else_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_else_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_else_elseContext sel_level_else_else() {
		Sel_level_else_elseContext _localctx = new Sel_level_else_elseContext(Context, State);
		EnterRule(_localctx, 40, RULE_sel_level_else_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(PRE_ELSE);
			State = 297;
			Match(LEFT_BRACE);
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 71503440849763360L) != 0)) {
				{
				{
				State = 298;
				_localctx.body = selector_statement();
				}
				}
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 304;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_else_ifContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Selector_statementContext body;
		public Sel_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE_IF() { return GetToken(sassy_parser.PRE_ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_elseContext sel_level_else() {
			return GetRuleContext<Sel_level_elseContext>(0);
		}
		public Sel_level_else_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_else_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_else_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_else_ifContext sel_level_else_if() {
		Sel_level_else_ifContext _localctx = new Sel_level_else_ifContext(Context, State);
		EnterRule(_localctx, 42, RULE_sel_level_else_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(PRE_ELSE_IF);
			State = 307;
			_localctx.cond = sub_expression(0);
			State = 308;
			Match(LEFT_BRACE);
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 71503440849763360L) != 0)) {
				{
				{
				State = 309;
				_localctx.body = selector_statement();
				}
				}
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 315;
			Match(RIGHT_BRACE);
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 316;
				_localctx.els = sel_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_valueContext : ParserRuleContext {
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(sassy_parser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Set_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSet_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSet_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_valueContext set_value() {
		Set_valueContext _localctx = new Set_valueContext(Context, State);
		EnterRule(_localctx, 44, RULE_set_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			Match(SET);
			State = 320;
			_localctx.expr = expression();
			State = 321;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(sassy_parser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		public Delete_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterDelete_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitDelete_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_valueContext delete_value() {
		Delete_valueContext _localctx = new Delete_valueContext(Context, State);
		EnterRule(_localctx, 46, RULE_delete_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			Match(DELETE);
			State = 324;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_valueContext : ParserRuleContext {
		public Sub_expressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(sassy_parser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Merge_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMerge_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMerge_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_valueContext merge_value() {
		Merge_valueContext _localctx = new Merge_valueContext(Context, State);
		EnterRule(_localctx, 48, RULE_merge_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			Match(MERGE);
			State = 327;
			_localctx.expr = sub_expression(0);
			State = 328;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_setContext : ParserRuleContext {
		public Field_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_set; } }
	 
		public Field_setContext() { }
		public virtual void CopyFrom(Field_setContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class String_key_fieldContext : Field_setContext {
		public IndexContext indexor;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		public String_key_fieldContext(Field_setContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_key_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_key_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_key_field(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Element_key_fieldContext : Field_setContext {
		public IndexContext indexor;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		public Element_key_fieldContext(Field_setContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterElement_key_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitElement_key_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_key_field(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_setContext field_set() {
		Field_setContext _localctx = new Field_setContext(Context, State);
		EnterRule(_localctx, 50, RULE_field_set);
		int _la;
		try {
			State = 346;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELEMENT:
				_localctx = new Element_key_fieldContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 330;
				Match(ELEMENT);
				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_BRACKET) {
					{
					State = 331;
					((Element_key_fieldContext)_localctx).indexor = index();
					}
				}

				State = 334;
				Match(COLON);
				State = 335;
				((Element_key_fieldContext)_localctx).expr = expression();
				State = 336;
				Match(SEMICOLON);
				}
				break;
			case STRING:
				_localctx = new String_key_fieldContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 338;
				Match(STRING);
				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_BRACKET) {
					{
					State = 339;
					((String_key_fieldContext)_localctx).indexor = index();
					}
				}

				State = 342;
				Match(COLON);
				State = 343;
				((String_key_fieldContext)_localctx).expr = expression();
				State = 344;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
	 
		public IndexContext() { }
		public virtual void CopyFrom(IndexContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class String_indexorContext : IndexContext {
		public IToken elem;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public String_indexorContext(IndexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_indexor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Element_indexorContext : IndexContext {
		public IToken elem;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Element_indexorContext(IndexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterElement_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitElement_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_indexor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Number_indexorContext : IndexContext {
		public IToken num;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(sassy_parser.NUMBER, 0); }
		public Number_indexorContext(IndexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNumber_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNumber_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_indexor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Class_indexorContext : IndexContext {
		public IToken clazz;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Class_indexorContext(IndexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterClass_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitClass_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_indexor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 52, RULE_index);
		try {
			State = 360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				_localctx = new Number_indexorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 348;
				Match(LEFT_BRACKET);
				State = 349;
				((Number_indexorContext)_localctx).num = Match(NUMBER);
				State = 350;
				Match(RIGHT_BRACKET);
				}
				break;
			case 2:
				_localctx = new Element_indexorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 351;
				Match(LEFT_BRACKET);
				State = 352;
				((Element_indexorContext)_localctx).elem = Match(ELEMENT);
				State = 353;
				Match(RIGHT_BRACKET);
				}
				break;
			case 3:
				_localctx = new Class_indexorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 354;
				Match(LEFT_BRACKET);
				State = 355;
				((Class_indexorContext)_localctx).clazz = Match(CLASS);
				State = 356;
				Match(RIGHT_BRACKET);
				}
				break;
			case 4:
				_localctx = new String_indexorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 357;
				Match(LEFT_BRACKET);
				State = 358;
				((String_indexorContext)_localctx).elem = Match(STRING);
				State = 359;
				Match(RIGHT_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Implicit_divideContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(sassy_parser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Implicit_divideContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImplicit_divide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImplicit_divide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_divide(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NormalContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public NormalContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Implicit_multiplyContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Implicit_multiplyContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImplicit_multiply(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImplicit_multiply(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_multiply(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Implicit_addContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Implicit_addContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImplicit_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImplicit_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_add(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Implicit_subtractContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(sassy_parser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Implicit_subtractContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImplicit_subtract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImplicit_subtract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_subtract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_expression);
		try {
			State = 371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				_localctx = new Implicit_addContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 362;
				Match(ADD);
				State = 363;
				sub_expression(0);
				}
				break;
			case 2:
				_localctx = new Implicit_subtractContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 364;
				Match(SUBTRACT);
				State = 365;
				sub_expression(0);
				}
				break;
			case 3:
				_localctx = new Implicit_multiplyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 366;
				Match(MULTIPLY);
				State = 367;
				sub_expression(0);
				}
				break;
			case 4:
				_localctx = new Implicit_divideContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 368;
				Match(DIVIDE);
				State = 369;
				sub_expression(0);
				}
				break;
			case 5:
				_localctx = new NormalContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 370;
				sub_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sub_expressionContext : ParserRuleContext {
		public Sub_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub_expression; } }
	 
		public Sub_expressionContext() { }
		public virtual void CopyFrom(Sub_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Not_equal_toContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL_TO() { return GetToken(sassy_parser.NOT_EQUAL_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public Not_equal_toContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNot_equal_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNot_equal_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot_equal_to(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Variable_referenceContext : Sub_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		public Variable_referenceContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterVariable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitVariable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_reference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Equal_toContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_TO() { return GetToken(sassy_parser.EQUAL_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public Equal_toContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterEqual_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitEqual_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqual_to(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexorContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public IndexorContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterIndexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitIndexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(sassy_parser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public OrContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Value_referenceContext : Sub_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Value_referenceContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterValue_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitValue_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_reference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lesser_than_equalContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSER_THAN_EQUAL() { return GetToken(sassy_parser.LESSER_THAN_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public Lesser_than_equalContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLesser_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLesser_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLesser_than_equal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractionContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(sassy_parser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public SubtractionContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PositiveContext : Sub_expressionContext {
		public Sub_expressionContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public PositiveContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterPositive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitPositive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Simple_callContext : Sub_expressionContext {
		public IToken lhs;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Simple_callContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSimple_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSimple_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_call(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisionContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(sassy_parser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public DivisionContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegativeContext : Sub_expressionContext {
		public Sub_expressionContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(sassy_parser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public NegativeContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNegative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNegative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : Sub_expressionContext {
		public Sub_expressionContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(sassy_parser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public NotContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lesser_thanContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSER_THAN() { return GetToken(sassy_parser.LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public Lesser_thanContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLesser_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLesser_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLesser_than(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Member_callContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public IToken name;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Member_callContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMember_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMember_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_call(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Greater_thanContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(sassy_parser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public Greater_thanContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterGreater_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitGreater_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreater_than(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(sassy_parser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public AndContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sub_sub_expressionContext : Sub_expressionContext {
		public Sub_expressionContext internal_expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Sub_sub_expressionContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSub_sub_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSub_sub_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_sub_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public MultiplicationContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RemainderContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULUS() { return GetToken(sassy_parser.MODULUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public RemainderContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRemainder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRemainder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemainder(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Greater_than_equalContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_EQUAL() { return GetToken(sassy_parser.GREATER_THAN_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public Greater_than_equalContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterGreater_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitGreater_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreater_than_equal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext cond;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(sassy_parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(sassy_parser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public TernaryContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public AdditionContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sub_expressionContext sub_expression() {
		return sub_expression(0);
	}

	private Sub_expressionContext sub_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Sub_expressionContext _localctx = new Sub_expressionContext(Context, _parentState);
		Sub_expressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_sub_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_BRACE:
			case LEFT_BRACKET:
			case NONE:
			case TRUE:
			case FALSE:
			case NUMBER:
			case STRING:
			case DELETE:
				{
				_localctx = new Value_referenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 374;
				value();
				}
				break;
			case VARIABLE:
				{
				_localctx = new Variable_referenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 375;
				Match(VARIABLE);
				}
				break;
			case LEFT_PAREN:
				{
				_localctx = new Sub_sub_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 376;
				Match(LEFT_PAREN);
				State = 377;
				((Sub_sub_expressionContext)_localctx).internal_expr = sub_expression(0);
				State = 378;
				Match(RIGHT_PAREN);
				}
				break;
			case SUBTRACT:
				{
				_localctx = new NegativeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 380;
				Match(SUBTRACT);
				State = 381;
				((NegativeContext)_localctx).child = sub_expression(20);
				}
				break;
			case ADD:
				{
				_localctx = new PositiveContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 382;
				Match(ADD);
				State = 383;
				((PositiveContext)_localctx).child = sub_expression(19);
				}
				break;
			case NOT:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 384;
				Match(NOT);
				State = 385;
				((NotContext)_localctx).child = sub_expression(18);
				}
				break;
			case ELEMENT:
				{
				_localctx = new Simple_callContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 386;
				((Simple_callContext)_localctx).lhs = Match(ELEMENT);
				State = 387;
				Match(LEFT_PAREN);
				State = 388;
				((Simple_callContext)_localctx).args = argument_list();
				State = 389;
				Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 452;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 450;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						_localctx = new AdditionContext(new Sub_expressionContext(_parentctx, _parentState));
						((AdditionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 393;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 394;
						Match(ADD);
						State = 395;
						((AdditionContext)_localctx).rhs = sub_expression(18);
						}
						break;
					case 2:
						{
						_localctx = new SubtractionContext(new Sub_expressionContext(_parentctx, _parentState));
						((SubtractionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 396;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 397;
						Match(SUBTRACT);
						State = 398;
						((SubtractionContext)_localctx).rhs = sub_expression(17);
						}
						break;
					case 3:
						{
						_localctx = new MultiplicationContext(new Sub_expressionContext(_parentctx, _parentState));
						((MultiplicationContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 399;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 400;
						Match(MULTIPLY);
						State = 401;
						((MultiplicationContext)_localctx).rhs = sub_expression(16);
						}
						break;
					case 4:
						{
						_localctx = new DivisionContext(new Sub_expressionContext(_parentctx, _parentState));
						((DivisionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 402;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 403;
						Match(DIVIDE);
						State = 404;
						((DivisionContext)_localctx).rhs = sub_expression(15);
						}
						break;
					case 5:
						{
						_localctx = new RemainderContext(new Sub_expressionContext(_parentctx, _parentState));
						((RemainderContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 405;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 406;
						Match(MODULUS);
						State = 407;
						((RemainderContext)_localctx).rhs = sub_expression(14);
						}
						break;
					case 6:
						{
						_localctx = new Greater_thanContext(new Sub_expressionContext(_parentctx, _parentState));
						((Greater_thanContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 408;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 409;
						Match(GREATER_THAN);
						State = 410;
						((Greater_thanContext)_localctx).rhs = sub_expression(13);
						}
						break;
					case 7:
						{
						_localctx = new Lesser_thanContext(new Sub_expressionContext(_parentctx, _parentState));
						((Lesser_thanContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 411;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 412;
						Match(LESSER_THAN);
						State = 413;
						((Lesser_thanContext)_localctx).rhs = sub_expression(12);
						}
						break;
					case 8:
						{
						_localctx = new Greater_than_equalContext(new Sub_expressionContext(_parentctx, _parentState));
						((Greater_than_equalContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 414;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 415;
						Match(GREATER_THAN_EQUAL);
						State = 416;
						((Greater_than_equalContext)_localctx).rhs = sub_expression(11);
						}
						break;
					case 9:
						{
						_localctx = new Lesser_than_equalContext(new Sub_expressionContext(_parentctx, _parentState));
						((Lesser_than_equalContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 417;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 418;
						Match(LESSER_THAN_EQUAL);
						State = 419;
						((Lesser_than_equalContext)_localctx).rhs = sub_expression(10);
						}
						break;
					case 10:
						{
						_localctx = new Equal_toContext(new Sub_expressionContext(_parentctx, _parentState));
						((Equal_toContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 420;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 421;
						Match(EQUAL_TO);
						State = 422;
						((Equal_toContext)_localctx).rhs = sub_expression(9);
						}
						break;
					case 11:
						{
						_localctx = new Not_equal_toContext(new Sub_expressionContext(_parentctx, _parentState));
						((Not_equal_toContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 423;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 424;
						Match(NOT_EQUAL_TO);
						State = 425;
						((Not_equal_toContext)_localctx).rhs = sub_expression(8);
						}
						break;
					case 12:
						{
						_localctx = new AndContext(new Sub_expressionContext(_parentctx, _parentState));
						((AndContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 426;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 427;
						Match(AND);
						State = 428;
						((AndContext)_localctx).rhs = sub_expression(7);
						}
						break;
					case 13:
						{
						_localctx = new OrContext(new Sub_expressionContext(_parentctx, _parentState));
						((OrContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 429;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 430;
						Match(OR);
						State = 431;
						((OrContext)_localctx).rhs = sub_expression(6);
						}
						break;
					case 14:
						{
						_localctx = new TernaryContext(new Sub_expressionContext(_parentctx, _parentState));
						((TernaryContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 432;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 433;
						Match(IF);
						State = 434;
						((TernaryContext)_localctx).cond = sub_expression(0);
						State = 435;
						Match(ELSE);
						State = 436;
						((TernaryContext)_localctx).rhs = sub_expression(2);
						}
						break;
					case 15:
						{
						_localctx = new IndexorContext(new Sub_expressionContext(_parentctx, _parentState));
						((IndexorContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 438;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 439;
						Match(LEFT_BRACKET);
						State = 440;
						((IndexorContext)_localctx).rhs = sub_expression(0);
						State = 441;
						Match(RIGHT_BRACKET);
						}
						break;
					case 16:
						{
						_localctx = new Member_callContext(new Sub_expressionContext(_parentctx, _parentState));
						((Member_callContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 443;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 444;
						Match(COLON);
						State = 445;
						((Member_callContext)_localctx).name = Match(ELEMENT);
						State = 446;
						Match(LEFT_PAREN);
						State = 447;
						((Member_callContext)_localctx).args = argument_list();
						State = 448;
						Match(RIGHT_PAREN);
						}
						break;
					}
					} 
				}
				State = 454;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class List_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public List_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterList_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitList_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Number_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(sassy_parser.NUMBER, 0); }
		public Number_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNumber_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNumber_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class String_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public String_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Boolean_falseContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(sassy_parser.FALSE, 0); }
		public Boolean_falseContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterBoolean_false(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitBoolean_false(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_false(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Object_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public Object_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterObject_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitObject_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoneContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(sassy_parser.NONE, 0); }
		public NoneContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNone(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Value_deletionContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(sassy_parser.DELETE, 0); }
		public Value_deletionContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterValue_deletion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitValue_deletion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_deletion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Boolean_trueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(sassy_parser.TRUE, 0); }
		public Boolean_trueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterBoolean_true(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitBoolean_true(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_true(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 58, RULE_value);
		try {
			State = 463;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DELETE:
				_localctx = new Value_deletionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 455;
				Match(DELETE);
				}
				break;
			case TRUE:
				_localctx = new Boolean_trueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 456;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new Boolean_falseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 457;
				Match(FALSE);
				}
				break;
			case NUMBER:
				_localctx = new Number_valueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 458;
				Match(NUMBER);
				}
				break;
			case STRING:
				_localctx = new String_valueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 459;
				Match(STRING);
				}
				break;
			case NONE:
				_localctx = new NoneContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 460;
				Match(NONE);
				}
				break;
			case LEFT_BRACKET:
				_localctx = new List_valueContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 461;
				list();
				}
				break;
			case LEFT_BRACE:
				_localctx = new Object_valueContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 462;
				obj();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public List_valuesContext @values;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public List_valuesContext list_values() {
			return GetRuleContext<List_valuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 60, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			Match(LEFT_BRACKET);
			State = 466;
			_localctx.@values = list_values();
			State = 468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 467;
				Match(COMMA);
				}
			}

			State = 470;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_valuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		public List_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_values; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterList_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitList_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_values(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_valuesContext list_values() {
		List_valuesContext _localctx = new List_valuesContext(Context, State);
		EnterRule(_localctx, 62, RULE_list_values);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 47129471116115968L) != 0)) {
					{
					State = 472;
					sub_expression(0);
					}
				}

				State = 479;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 475;
						Match(COMMA);
						State = 476;
						sub_expression(0);
						}
						} 
					}
					State = 481;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public Obj_valuesContext @values;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Obj_valuesContext obj_values() {
			return GetRuleContext<Obj_valuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 64, RULE_obj);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			Match(LEFT_BRACE);
			State = 485;
			_localctx.@values = obj_values();
			State = 487;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 486;
				Match(COMMA);
				}
			}

			State = 489;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_valuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Key_valueContext[] key_value() {
			return GetRuleContexts<Key_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_valueContext key_value(int i) {
			return GetRuleContext<Key_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		public Obj_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_values; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterObj_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitObj_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_values(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_valuesContext obj_values() {
		Obj_valuesContext _localctx = new Obj_valuesContext(Context, State);
		EnterRule(_localctx, 66, RULE_obj_values);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRING || _la==ELEMENT) {
					{
					State = 491;
					key_value();
					}
				}

				State = 498;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 494;
						Match(COMMA);
						State = 495;
						key_value();
						}
						} 
					}
					State = 500;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_valueContext : ParserRuleContext {
		public Key_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_value; } }
	 
		public Key_valueContext() { }
		public virtual void CopyFrom(Key_valueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class String_keyContext : Key_valueContext {
		public IToken key;
		public Sub_expressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public String_keyContext(Key_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_key(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Literal_keyContext : Key_valueContext {
		public IToken key;
		public Sub_expressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Literal_keyContext(Key_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLiteral_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLiteral_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Key_valueContext key_value() {
		Key_valueContext _localctx = new Key_valueContext(Context, State);
		EnterRule(_localctx, 68, RULE_key_value);
		try {
			State = 509;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELEMENT:
				_localctx = new Literal_keyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 503;
				((Literal_keyContext)_localctx).key = Match(ELEMENT);
				State = 504;
				Match(COLON);
				State = 505;
				((Literal_keyContext)_localctx).val = sub_expression(0);
				}
				break;
			case STRING:
				_localctx = new String_keyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 506;
				((String_keyContext)_localctx).key = Match(STRING);
				State = 507;
				Match(COLON);
				State = 508;
				((String_keyContext)_localctx).val = sub_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 70, RULE_argument_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 512;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 47129471116115968L) != 0)) {
					{
					State = 511;
					argument();
					}
				}

				State = 518;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 514;
						Match(COMMA);
						State = 515;
						argument();
						}
						} 
					}
					State = 520;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
				}
				}
				break;
			}
			State = 524;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 523;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Named_argumentContext : ArgumentContext {
		public IToken key;
		public Sub_expressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Named_argumentContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_argument(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Unnamed_argumentContext : ArgumentContext {
		public Sub_expressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Unnamed_argumentContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterUnnamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitUnnamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnnamed_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 72, RULE_argument);
		try {
			State = 530;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				_localctx = new Named_argumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 526;
				((Named_argumentContext)_localctx).key = Match(VARIABLE);
				State = 527;
				Match(COLON);
				State = 528;
				((Named_argumentContext)_localctx).val = sub_expression(0);
				}
				break;
			case 2:
				_localctx = new Unnamed_argumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 529;
				((Unnamed_argumentContext)_localctx).val = sub_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_decl_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declContext[] arg_decl() {
			return GetRuleContexts<Arg_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declContext arg_decl(int i) {
			return GetRuleContext<Arg_declContext>(i);
		}
		public Arg_decl_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_decl_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArg_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArg_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg_decl_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arg_decl_listContext arg_decl_list() {
		Arg_decl_listContext _localctx = new Arg_decl_listContext(Context, State);
		EnterRule(_localctx, 74, RULE_arg_decl_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE) {
					{
					State = 532;
					arg_decl();
					}
				}

				State = 539;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 535;
						Match(COMMA);
						State = 536;
						arg_decl();
						}
						} 
					}
					State = 541;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
				}
				}
				break;
			}
			State = 545;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 544;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_declContext : ParserRuleContext {
		public Arg_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_decl; } }
	 
		public Arg_declContext() { }
		public virtual void CopyFrom(Arg_declContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Argument_without_defaultContext : Arg_declContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		public Argument_without_defaultContext(Arg_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArgument_without_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArgument_without_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_without_default(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Argument_with_defaultContext : Arg_declContext {
		public IToken name;
		public Sub_expressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Argument_with_defaultContext(Arg_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArgument_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArgument_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_with_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arg_declContext arg_decl() {
		Arg_declContext _localctx = new Arg_declContext(Context, State);
		EnterRule(_localctx, 76, RULE_arg_decl);
		try {
			State = 551;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				_localctx = new Argument_without_defaultContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 547;
				((Argument_without_defaultContext)_localctx).name = Match(VARIABLE);
				}
				break;
			case 2:
				_localctx = new Argument_with_defaultContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 548;
				((Argument_with_defaultContext)_localctx).name = Match(VARIABLE);
				State = 549;
				Match(COLON);
				State = 550;
				((Argument_with_defaultContext)_localctx).val = sub_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 78, RULE_function_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254872096L) != 0)) {
				{
				{
				State = 553;
				function_statement();
				}
				}
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_conditionalContext fn_level_conditional() {
			return GetRuleContext<Fn_level_conditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_returnContext fn_return() {
			return GetRuleContext<Fn_returnContext>(0);
		}
		public Function_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFunction_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFunction_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_statementContext function_statement() {
		Function_statementContext _localctx = new Function_statementContext(Context, State);
		EnterRule(_localctx, 80, RULE_function_statement);
		try {
			State = 562;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 559;
				var_decl();
				}
				break;
			case PRE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 560;
				fn_level_conditional();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 561;
				fn_return();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_conditionalContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Function_statementContext body;
		public Fn_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_IF() { return GetToken(sassy_parser.PRE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_elseContext fn_level_else() {
			return GetRuleContext<Fn_level_elseContext>(0);
		}
		public Fn_level_conditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_conditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_conditionalContext fn_level_conditional() {
		Fn_level_conditionalContext _localctx = new Fn_level_conditionalContext(Context, State);
		EnterRule(_localctx, 82, RULE_fn_level_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			Match(PRE_IF);
			State = 565;
			_localctx.cond = sub_expression(0);
			State = 566;
			Match(LEFT_BRACE);
			State = 570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254872096L) != 0)) {
				{
				{
				State = 567;
				_localctx.body = function_statement();
				}
				}
				State = 572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 573;
			Match(RIGHT_BRACE);
			State = 575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 574;
				_localctx.els = fn_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_else_elseContext fn_level_else_else() {
			return GetRuleContext<Fn_level_else_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_else_ifContext fn_level_else_if() {
			return GetRuleContext<Fn_level_else_ifContext>(0);
		}
		public Fn_level_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_elseContext fn_level_else() {
		Fn_level_elseContext _localctx = new Fn_level_elseContext(Context, State);
		EnterRule(_localctx, 84, RULE_fn_level_else);
		try {
			State = 579;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRE_ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 577;
				fn_level_else_else();
				}
				break;
			case PRE_ELSE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 578;
				fn_level_else_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_else_elseContext : ParserRuleContext {
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE() { return GetToken(sassy_parser.PRE_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Fn_level_else_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_else_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_else_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_else_elseContext fn_level_else_else() {
		Fn_level_else_elseContext _localctx = new Fn_level_else_elseContext(Context, State);
		EnterRule(_localctx, 86, RULE_fn_level_else_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			Match(PRE_ELSE);
			State = 582;
			Match(LEFT_BRACE);
			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254872096L) != 0)) {
				{
				{
				State = 583;
				_localctx.body = function_statement();
				}
				}
				State = 588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 589;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_else_ifContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Function_statementContext body;
		public Fn_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE_IF() { return GetToken(sassy_parser.PRE_ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_elseContext fn_level_else() {
			return GetRuleContext<Fn_level_elseContext>(0);
		}
		public Fn_level_else_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_else_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_else_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_else_ifContext fn_level_else_if() {
		Fn_level_else_ifContext _localctx = new Fn_level_else_ifContext(Context, State);
		EnterRule(_localctx, 88, RULE_fn_level_else_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			Match(PRE_ELSE_IF);
			State = 592;
			_localctx.cond = sub_expression(0);
			State = 593;
			Match(LEFT_BRACE);
			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199254872096L) != 0)) {
				{
				{
				State = 594;
				_localctx.body = function_statement();
				}
				}
				State = 599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 600;
			Match(RIGHT_BRACE);
			State = 602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 601;
				_localctx.els = fn_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(sassy_parser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		public Fn_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_returnContext fn_return() {
		Fn_returnContext _localctx = new Fn_returnContext(Context, State);
		EnterRule(_localctx, 90, RULE_fn_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604;
			Match(RETURN);
			State = 605;
			sub_expression(0);
			State = 606;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixin_includeContext : ParserRuleContext {
		public IToken mixin;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(sassy_parser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Mixin_includeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixin_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMixin_include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMixin_include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMixin_include(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mixin_includeContext mixin_include() {
		Mixin_includeContext _localctx = new Mixin_includeContext(Context, State);
		EnterRule(_localctx, 92, RULE_mixin_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			Match(INCLUDE);
			State = 609;
			_localctx.mixin = Match(ELEMENT);
			State = 610;
			Match(LEFT_PAREN);
			State = 611;
			_localctx.args = argument_list();
			State = 612;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return selector_sempred((SelectorContext)_localctx, predIndex);
		case 15: return selector_no_children_sempred((Selector_no_childrenContext)_localctx, predIndex);
		case 28: return sub_expression_sempred((Sub_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool selector_sempred(SelectorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		}
		return true;
	}
	private bool selector_no_children_sempred(Selector_no_childrenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		}
		return true;
	}
	private bool sub_expression_sempred(Sub_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 17);
		case 6: return Precpred(Context, 16);
		case 7: return Precpred(Context, 15);
		case 8: return Precpred(Context, 14);
		case 9: return Precpred(Context, 13);
		case 10: return Precpred(Context, 12);
		case 11: return Precpred(Context, 11);
		case 12: return Precpred(Context, 10);
		case 13: return Precpred(Context, 9);
		case 14: return Precpred(Context, 8);
		case 15: return Precpred(Context, 7);
		case 16: return Precpred(Context, 6);
		case 17: return Precpred(Context, 5);
		case 18: return Precpred(Context, 1);
		case 19: return Precpred(Context, 4);
		case 20: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,55,615,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,1,0,4,0,96,8,0,11,0,12,0,97,1,
		0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,109,8,1,1,2,1,2,1,2,1,2,1,3,1,3,
		1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,5,7,148,8,7,10,7,
		12,7,151,9,7,1,7,1,7,3,7,155,8,7,1,8,1,8,3,8,159,8,8,1,9,1,9,1,9,5,9,164,
		8,9,10,9,12,9,167,9,9,1,9,1,9,1,10,1,10,1,10,1,10,5,10,175,8,10,10,10,
		12,10,178,9,10,1,10,1,10,3,10,182,8,10,1,11,1,11,1,11,1,11,1,11,1,12,5,
		12,190,8,12,10,12,12,12,193,9,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
		13,3,13,203,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,3,14,221,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,5,14,231,8,14,10,14,12,14,234,9,14,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,252,8,15,1,15,
		1,15,1,15,1,15,1,15,5,15,259,8,15,10,15,12,15,262,9,15,1,16,5,16,265,8,
		16,10,16,12,16,268,9,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,278,
		8,17,1,18,1,18,1,18,1,18,5,18,284,8,18,10,18,12,18,287,9,18,1,18,1,18,
		3,18,291,8,18,1,19,1,19,3,19,295,8,19,1,20,1,20,1,20,5,20,300,8,20,10,
		20,12,20,303,9,20,1,20,1,20,1,21,1,21,1,21,1,21,5,21,311,8,21,10,21,12,
		21,314,9,21,1,21,1,21,3,21,318,8,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
		1,24,1,24,1,24,1,24,1,25,1,25,3,25,333,8,25,1,25,1,25,1,25,1,25,1,25,1,
		25,3,25,341,8,25,1,25,1,25,1,25,1,25,3,25,347,8,25,1,26,1,26,1,26,1,26,
		1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,361,8,26,1,27,1,27,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,3,27,372,8,27,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,392,8,
		28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
		28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
		28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
		28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
		28,1,28,5,28,451,8,28,10,28,12,28,454,9,28,1,29,1,29,1,29,1,29,1,29,1,
		29,1,29,1,29,3,29,464,8,29,1,30,1,30,1,30,3,30,469,8,30,1,30,1,30,1,31,
		3,31,474,8,31,1,31,1,31,5,31,478,8,31,10,31,12,31,481,9,31,3,31,483,8,
		31,1,32,1,32,1,32,3,32,488,8,32,1,32,1,32,1,33,3,33,493,8,33,1,33,1,33,
		5,33,497,8,33,10,33,12,33,500,9,33,3,33,502,8,33,1,34,1,34,1,34,1,34,1,
		34,1,34,3,34,510,8,34,1,35,3,35,513,8,35,1,35,1,35,5,35,517,8,35,10,35,
		12,35,520,9,35,3,35,522,8,35,1,35,3,35,525,8,35,1,36,1,36,1,36,1,36,3,
		36,531,8,36,1,37,3,37,534,8,37,1,37,1,37,5,37,538,8,37,10,37,12,37,541,
		9,37,3,37,543,8,37,1,37,3,37,546,8,37,1,38,1,38,1,38,1,38,3,38,552,8,38,
		1,39,5,39,555,8,39,10,39,12,39,558,9,39,1,40,1,40,1,40,3,40,563,8,40,1,
		41,1,41,1,41,1,41,5,41,569,8,41,10,41,12,41,572,9,41,1,41,1,41,3,41,576,
		8,41,1,42,1,42,3,42,580,8,42,1,43,1,43,1,43,5,43,585,8,43,10,43,12,43,
		588,9,43,1,43,1,43,1,44,1,44,1,44,1,44,5,44,596,8,44,10,44,12,44,599,9,
		44,1,44,1,44,3,44,603,8,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,
		1,46,1,46,0,3,28,30,56,47,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
		82,84,86,88,90,92,0,0,685,0,95,1,0,0,0,2,108,1,0,0,0,4,110,1,0,0,0,6,114,
		1,0,0,0,8,119,1,0,0,0,10,125,1,0,0,0,12,134,1,0,0,0,14,143,1,0,0,0,16,
		158,1,0,0,0,18,160,1,0,0,0,20,170,1,0,0,0,22,183,1,0,0,0,24,191,1,0,0,
		0,26,202,1,0,0,0,28,220,1,0,0,0,30,251,1,0,0,0,32,266,1,0,0,0,34,277,1,
		0,0,0,36,279,1,0,0,0,38,294,1,0,0,0,40,296,1,0,0,0,42,306,1,0,0,0,44,319,
		1,0,0,0,46,323,1,0,0,0,48,326,1,0,0,0,50,346,1,0,0,0,52,360,1,0,0,0,54,
		371,1,0,0,0,56,391,1,0,0,0,58,463,1,0,0,0,60,465,1,0,0,0,62,482,1,0,0,
		0,64,484,1,0,0,0,66,501,1,0,0,0,68,509,1,0,0,0,70,521,1,0,0,0,72,530,1,
		0,0,0,74,542,1,0,0,0,76,551,1,0,0,0,78,556,1,0,0,0,80,562,1,0,0,0,82,564,
		1,0,0,0,84,579,1,0,0,0,86,581,1,0,0,0,88,591,1,0,0,0,90,604,1,0,0,0,92,
		608,1,0,0,0,94,96,3,2,1,0,95,94,1,0,0,0,96,97,1,0,0,0,97,95,1,0,0,0,97,
		98,1,0,0,0,98,99,1,0,0,0,99,100,5,0,0,1,100,1,1,0,0,0,101,109,3,4,2,0,
		102,109,3,6,3,0,103,109,3,8,4,0,104,109,3,10,5,0,105,109,3,12,6,0,106,
		109,3,14,7,0,107,109,3,22,11,0,108,101,1,0,0,0,108,102,1,0,0,0,108,103,
		1,0,0,0,108,104,1,0,0,0,108,105,1,0,0,0,108,106,1,0,0,0,108,107,1,0,0,
		0,109,3,1,0,0,0,110,111,5,3,0,0,111,112,5,49,0,0,112,113,5,24,0,0,113,
		5,1,0,0,0,114,115,5,53,0,0,115,116,5,25,0,0,116,117,3,54,27,0,117,118,
		5,24,0,0,118,7,1,0,0,0,119,120,5,15,0,0,120,121,5,49,0,0,121,122,5,26,
		0,0,122,123,5,48,0,0,123,124,5,24,0,0,124,9,1,0,0,0,125,126,5,4,0,0,126,
		127,5,55,0,0,127,128,5,20,0,0,128,129,3,74,37,0,129,130,5,21,0,0,130,131,
		5,18,0,0,131,132,3,78,39,0,132,133,5,19,0,0,133,11,1,0,0,0,134,135,5,8,
		0,0,135,136,5,55,0,0,136,137,5,20,0,0,137,138,3,74,37,0,138,139,5,21,0,
		0,139,140,5,18,0,0,140,141,3,32,16,0,141,142,5,19,0,0,142,13,1,0,0,0,143,
		144,5,5,0,0,144,145,3,56,28,0,145,149,5,18,0,0,146,148,3,2,1,0,147,146,
		1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,152,1,0,0,
		0,151,149,1,0,0,0,152,154,5,19,0,0,153,155,3,16,8,0,154,153,1,0,0,0,154,
		155,1,0,0,0,155,15,1,0,0,0,156,159,3,18,9,0,157,159,3,20,10,0,158,156,
		1,0,0,0,158,157,1,0,0,0,159,17,1,0,0,0,160,161,5,6,0,0,161,165,5,18,0,
		0,162,164,3,2,1,0,163,162,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,165,
		166,1,0,0,0,166,168,1,0,0,0,167,165,1,0,0,0,168,169,5,19,0,0,169,19,1,
		0,0,0,170,171,5,7,0,0,171,172,3,56,28,0,172,176,5,18,0,0,173,175,3,2,1,
		0,174,173,1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,
		179,1,0,0,0,178,176,1,0,0,0,179,181,5,19,0,0,180,182,3,16,8,0,181,180,
		1,0,0,0,181,182,1,0,0,0,182,21,1,0,0,0,183,184,3,24,12,0,184,185,5,18,
		0,0,185,186,3,32,16,0,186,187,5,19,0,0,187,23,1,0,0,0,188,190,3,26,13,
		0,189,188,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,
		194,1,0,0,0,193,191,1,0,0,0,194,195,3,28,14,0,195,25,1,0,0,0,196,197,5,
		12,0,0,197,203,5,49,0,0,198,199,5,13,0,0,199,203,5,49,0,0,200,201,5,14,
		0,0,201,203,5,49,0,0,202,196,1,0,0,0,202,198,1,0,0,0,202,200,1,0,0,0,203,
		27,1,0,0,0,204,205,6,14,-1,0,205,221,5,55,0,0,206,221,5,52,0,0,207,221,
		5,51,0,0,208,221,5,54,0,0,209,210,5,20,0,0,210,211,3,28,14,0,211,212,5,
		21,0,0,212,221,1,0,0,0,213,214,5,27,0,0,214,221,5,55,0,0,215,216,5,43,
		0,0,216,221,5,52,0,0,217,218,5,43,0,0,218,221,5,51,0,0,219,221,5,29,0,
		0,220,204,1,0,0,0,220,206,1,0,0,0,220,207,1,0,0,0,220,208,1,0,0,0,220,
		209,1,0,0,0,220,213,1,0,0,0,220,215,1,0,0,0,220,217,1,0,0,0,220,219,1,
		0,0,0,221,232,1,0,0,0,222,223,10,7,0,0,223,224,5,26,0,0,224,231,3,30,15,
		0,225,226,10,6,0,0,226,227,5,33,0,0,227,231,3,30,15,0,228,229,10,5,0,0,
		229,231,3,30,15,0,230,222,1,0,0,0,230,225,1,0,0,0,230,228,1,0,0,0,231,
		234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,29,1,0,0,0,234,232,1,0,
		0,0,235,236,6,15,-1,0,236,252,5,55,0,0,237,252,5,52,0,0,238,252,5,51,0,
		0,239,252,5,54,0,0,240,241,5,20,0,0,241,242,3,30,15,0,242,243,5,21,0,0,
		243,252,1,0,0,0,244,245,5,27,0,0,245,252,5,55,0,0,246,247,5,43,0,0,247,
		252,5,52,0,0,248,249,5,43,0,0,249,252,5,51,0,0,250,252,5,29,0,0,251,235,
		1,0,0,0,251,237,1,0,0,0,251,238,1,0,0,0,251,239,1,0,0,0,251,240,1,0,0,
		0,251,244,1,0,0,0,251,246,1,0,0,0,251,248,1,0,0,0,251,250,1,0,0,0,252,
		260,1,0,0,0,253,254,10,6,0,0,254,255,5,26,0,0,255,259,3,30,15,7,256,257,
		10,5,0,0,257,259,3,30,15,6,258,253,1,0,0,0,258,256,1,0,0,0,259,262,1,0,
		0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,31,1,0,0,0,262,260,1,0,0,0,263,
		265,3,34,17,0,264,263,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,
		1,0,0,0,267,33,1,0,0,0,268,266,1,0,0,0,269,278,3,6,3,0,270,278,3,36,18,
		0,271,278,3,44,22,0,272,278,3,46,23,0,273,278,3,48,24,0,274,278,3,50,25,
		0,275,278,3,22,11,0,276,278,3,92,46,0,277,269,1,0,0,0,277,270,1,0,0,0,
		277,271,1,0,0,0,277,272,1,0,0,0,277,273,1,0,0,0,277,274,1,0,0,0,277,275,
		1,0,0,0,277,276,1,0,0,0,278,35,1,0,0,0,279,280,5,5,0,0,280,281,3,56,28,
		0,281,285,5,18,0,0,282,284,3,34,17,0,283,282,1,0,0,0,284,287,1,0,0,0,285,
		283,1,0,0,0,285,286,1,0,0,0,286,288,1,0,0,0,287,285,1,0,0,0,288,290,5,
		19,0,0,289,291,3,38,19,0,290,289,1,0,0,0,290,291,1,0,0,0,291,37,1,0,0,
		0,292,295,3,40,20,0,293,295,3,42,21,0,294,292,1,0,0,0,294,293,1,0,0,0,
		295,39,1,0,0,0,296,297,5,6,0,0,297,301,5,18,0,0,298,300,3,34,17,0,299,
		298,1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,304,1,
		0,0,0,303,301,1,0,0,0,304,305,5,19,0,0,305,41,1,0,0,0,306,307,5,7,0,0,
		307,308,3,56,28,0,308,312,5,18,0,0,309,311,3,34,17,0,310,309,1,0,0,0,311,
		314,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,314,312,1,
		0,0,0,315,317,5,19,0,0,316,318,3,38,19,0,317,316,1,0,0,0,317,318,1,0,0,
		0,318,43,1,0,0,0,319,320,5,10,0,0,320,321,3,54,27,0,321,322,5,24,0,0,322,
		45,1,0,0,0,323,324,5,50,0,0,324,325,5,24,0,0,325,47,1,0,0,0,326,327,5,
		11,0,0,327,328,3,56,28,0,328,329,5,24,0,0,329,49,1,0,0,0,330,332,5,55,
		0,0,331,333,3,52,26,0,332,331,1,0,0,0,332,333,1,0,0,0,333,334,1,0,0,0,
		334,335,5,25,0,0,335,336,3,54,27,0,336,337,5,24,0,0,337,347,1,0,0,0,338,
		340,5,49,0,0,339,341,3,52,26,0,340,339,1,0,0,0,340,341,1,0,0,0,341,342,
		1,0,0,0,342,343,5,25,0,0,343,344,3,54,27,0,344,345,5,24,0,0,345,347,1,
		0,0,0,346,330,1,0,0,0,346,338,1,0,0,0,347,51,1,0,0,0,348,349,5,22,0,0,
		349,350,5,48,0,0,350,361,5,23,0,0,351,352,5,22,0,0,352,353,5,55,0,0,353,
		361,5,23,0,0,354,355,5,22,0,0,355,356,5,52,0,0,356,361,5,23,0,0,357,358,
		5,22,0,0,358,359,5,49,0,0,359,361,5,23,0,0,360,348,1,0,0,0,360,351,1,0,
		0,0,360,354,1,0,0,0,360,357,1,0,0,0,361,53,1,0,0,0,362,363,5,27,0,0,363,
		372,3,56,28,0,364,365,5,28,0,0,365,372,3,56,28,0,366,367,5,29,0,0,367,
		372,3,56,28,0,368,369,5,30,0,0,369,372,3,56,28,0,370,372,3,56,28,0,371,
		362,1,0,0,0,371,364,1,0,0,0,371,366,1,0,0,0,371,368,1,0,0,0,371,370,1,
		0,0,0,372,55,1,0,0,0,373,374,6,28,-1,0,374,392,3,58,29,0,375,392,5,53,
		0,0,376,377,5,20,0,0,377,378,3,56,28,0,378,379,5,21,0,0,379,392,1,0,0,
		0,380,381,5,28,0,0,381,392,3,56,28,20,382,383,5,27,0,0,383,392,3,56,28,
		19,384,385,5,32,0,0,385,392,3,56,28,18,386,387,5,55,0,0,387,388,5,20,0,
		0,388,389,3,70,35,0,389,390,5,21,0,0,390,392,1,0,0,0,391,373,1,0,0,0,391,
		375,1,0,0,0,391,376,1,0,0,0,391,380,1,0,0,0,391,382,1,0,0,0,391,384,1,
		0,0,0,391,386,1,0,0,0,392,452,1,0,0,0,393,394,10,17,0,0,394,395,5,27,0,
		0,395,451,3,56,28,18,396,397,10,16,0,0,397,398,5,28,0,0,398,451,3,56,28,
		17,399,400,10,15,0,0,400,401,5,29,0,0,401,451,3,56,28,16,402,403,10,14,
		0,0,403,404,5,30,0,0,404,451,3,56,28,15,405,406,10,13,0,0,406,407,5,31,
		0,0,407,451,3,56,28,14,408,409,10,12,0,0,409,410,5,33,0,0,410,451,3,56,
		28,13,411,412,10,11,0,0,412,413,5,35,0,0,413,451,3,56,28,12,414,415,10,
		10,0,0,415,416,5,34,0,0,416,451,3,56,28,11,417,418,10,9,0,0,418,419,5,
		36,0,0,419,451,3,56,28,10,420,421,10,8,0,0,421,422,5,37,0,0,422,451,3,
		56,28,9,423,424,10,7,0,0,424,425,5,38,0,0,425,451,3,56,28,8,426,427,10,
		6,0,0,427,428,5,39,0,0,428,451,3,56,28,7,429,430,10,5,0,0,430,431,5,40,
		0,0,431,451,3,56,28,6,432,433,10,1,0,0,433,434,5,41,0,0,434,435,3,56,28,
		0,435,436,5,42,0,0,436,437,3,56,28,2,437,451,1,0,0,0,438,439,10,4,0,0,
		439,440,5,22,0,0,440,441,3,56,28,0,441,442,5,23,0,0,442,451,1,0,0,0,443,
		444,10,2,0,0,444,445,5,25,0,0,445,446,5,55,0,0,446,447,5,20,0,0,447,448,
		3,70,35,0,448,449,5,21,0,0,449,451,1,0,0,0,450,393,1,0,0,0,450,396,1,0,
		0,0,450,399,1,0,0,0,450,402,1,0,0,0,450,405,1,0,0,0,450,408,1,0,0,0,450,
		411,1,0,0,0,450,414,1,0,0,0,450,417,1,0,0,0,450,420,1,0,0,0,450,423,1,
		0,0,0,450,426,1,0,0,0,450,429,1,0,0,0,450,432,1,0,0,0,450,438,1,0,0,0,
		450,443,1,0,0,0,451,454,1,0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,57,
		1,0,0,0,454,452,1,0,0,0,455,464,5,50,0,0,456,464,5,45,0,0,457,464,5,46,
		0,0,458,464,5,48,0,0,459,464,5,49,0,0,460,464,5,44,0,0,461,464,3,60,30,
		0,462,464,3,64,32,0,463,455,1,0,0,0,463,456,1,0,0,0,463,457,1,0,0,0,463,
		458,1,0,0,0,463,459,1,0,0,0,463,460,1,0,0,0,463,461,1,0,0,0,463,462,1,
		0,0,0,464,59,1,0,0,0,465,466,5,22,0,0,466,468,3,62,31,0,467,469,5,26,0,
		0,468,467,1,0,0,0,468,469,1,0,0,0,469,470,1,0,0,0,470,471,5,23,0,0,471,
		61,1,0,0,0,472,474,3,56,28,0,473,472,1,0,0,0,473,474,1,0,0,0,474,479,1,
		0,0,0,475,476,5,26,0,0,476,478,3,56,28,0,477,475,1,0,0,0,478,481,1,0,0,
		0,479,477,1,0,0,0,479,480,1,0,0,0,480,483,1,0,0,0,481,479,1,0,0,0,482,
		473,1,0,0,0,482,483,1,0,0,0,483,63,1,0,0,0,484,485,5,18,0,0,485,487,3,
		66,33,0,486,488,5,26,0,0,487,486,1,0,0,0,487,488,1,0,0,0,488,489,1,0,0,
		0,489,490,5,19,0,0,490,65,1,0,0,0,491,493,3,68,34,0,492,491,1,0,0,0,492,
		493,1,0,0,0,493,498,1,0,0,0,494,495,5,26,0,0,495,497,3,68,34,0,496,494,
		1,0,0,0,497,500,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,502,1,0,0,
		0,500,498,1,0,0,0,501,492,1,0,0,0,501,502,1,0,0,0,502,67,1,0,0,0,503,504,
		5,55,0,0,504,505,5,25,0,0,505,510,3,56,28,0,506,507,5,49,0,0,507,508,5,
		25,0,0,508,510,3,56,28,0,509,503,1,0,0,0,509,506,1,0,0,0,510,69,1,0,0,
		0,511,513,3,72,36,0,512,511,1,0,0,0,512,513,1,0,0,0,513,518,1,0,0,0,514,
		515,5,26,0,0,515,517,3,72,36,0,516,514,1,0,0,0,517,520,1,0,0,0,518,516,
		1,0,0,0,518,519,1,0,0,0,519,522,1,0,0,0,520,518,1,0,0,0,521,512,1,0,0,
		0,521,522,1,0,0,0,522,524,1,0,0,0,523,525,5,26,0,0,524,523,1,0,0,0,524,
		525,1,0,0,0,525,71,1,0,0,0,526,527,5,53,0,0,527,528,5,25,0,0,528,531,3,
		56,28,0,529,531,3,56,28,0,530,526,1,0,0,0,530,529,1,0,0,0,531,73,1,0,0,
		0,532,534,3,76,38,0,533,532,1,0,0,0,533,534,1,0,0,0,534,539,1,0,0,0,535,
		536,5,26,0,0,536,538,3,76,38,0,537,535,1,0,0,0,538,541,1,0,0,0,539,537,
		1,0,0,0,539,540,1,0,0,0,540,543,1,0,0,0,541,539,1,0,0,0,542,533,1,0,0,
		0,542,543,1,0,0,0,543,545,1,0,0,0,544,546,5,26,0,0,545,544,1,0,0,0,545,
		546,1,0,0,0,546,75,1,0,0,0,547,552,5,53,0,0,548,549,5,53,0,0,549,550,5,
		25,0,0,550,552,3,56,28,0,551,547,1,0,0,0,551,548,1,0,0,0,552,77,1,0,0,
		0,553,555,3,80,40,0,554,553,1,0,0,0,555,558,1,0,0,0,556,554,1,0,0,0,556,
		557,1,0,0,0,557,79,1,0,0,0,558,556,1,0,0,0,559,563,3,6,3,0,560,563,3,82,
		41,0,561,563,3,90,45,0,562,559,1,0,0,0,562,560,1,0,0,0,562,561,1,0,0,0,
		563,81,1,0,0,0,564,565,5,5,0,0,565,566,3,56,28,0,566,570,5,18,0,0,567,
		569,3,80,40,0,568,567,1,0,0,0,569,572,1,0,0,0,570,568,1,0,0,0,570,571,
		1,0,0,0,571,573,1,0,0,0,572,570,1,0,0,0,573,575,5,19,0,0,574,576,3,84,
		42,0,575,574,1,0,0,0,575,576,1,0,0,0,576,83,1,0,0,0,577,580,3,86,43,0,
		578,580,3,88,44,0,579,577,1,0,0,0,579,578,1,0,0,0,580,85,1,0,0,0,581,582,
		5,6,0,0,582,586,5,18,0,0,583,585,3,80,40,0,584,583,1,0,0,0,585,588,1,0,
		0,0,586,584,1,0,0,0,586,587,1,0,0,0,587,589,1,0,0,0,588,586,1,0,0,0,589,
		590,5,19,0,0,590,87,1,0,0,0,591,592,5,7,0,0,592,593,3,56,28,0,593,597,
		5,18,0,0,594,596,3,80,40,0,595,594,1,0,0,0,596,599,1,0,0,0,597,595,1,0,
		0,0,597,598,1,0,0,0,598,600,1,0,0,0,599,597,1,0,0,0,600,602,5,19,0,0,601,
		603,3,84,42,0,602,601,1,0,0,0,602,603,1,0,0,0,603,89,1,0,0,0,604,605,5,
		17,0,0,605,606,3,56,28,0,606,607,5,24,0,0,607,91,1,0,0,0,608,609,5,16,
		0,0,609,610,5,55,0,0,610,611,5,20,0,0,611,612,3,70,35,0,612,613,5,21,0,
		0,613,93,1,0,0,0,60,97,108,149,154,158,165,176,181,191,202,220,230,232,
		251,258,260,266,277,285,290,294,301,312,317,332,340,346,360,371,391,450,
		452,463,468,473,479,482,487,492,498,501,509,512,518,521,524,530,533,539,
		542,545,551,556,562,570,575,579,586,597,602
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SassyPatchGrammar
