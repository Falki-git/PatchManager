//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/arall/PatchManager/src/PatchManager.SassyPatching/SassyPatchGrammar\sassy_parser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SassyPatchGrammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class sassy_parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, SPACE=2, USE=3, FUNCTION=4, PRE_IF=5, PRE_ELSE=6, PRE_ELSE_IF=7, 
		MIXIN=8, WHILE=9, FOR=10, FROM=11, THROUGH=12, TO=13, EACH=14, IN=15, 
		SET=16, MERGE=17, REQUIRE=18, REQUIRE_NOT=19, STAGE=20, DEFINE_STAGE=21, 
		INCLUDE=22, RETURN=23, PATCH=24, NEW=25, LEFT_BRACE=26, RIGHT_BRACE=27, 
		LEFT_PAREN=28, RIGHT_PAREN=29, LEFT_BRACKET=30, RIGHT_BRACKET=31, SEMICOLON=32, 
		COLON=33, COMMA=34, ADD=35, SUBTRACT=36, MULTIPLY=37, DIVIDE=38, MODULUS=39, 
		NOT=40, GREATER_THAN=41, GREATER_THAN_EQUAL=42, LESSER_THAN=43, LESSER_THAN_EQUAL=44, 
		EQUAL_TO=45, NOT_EQUAL_TO=46, AND=47, OR=48, IF=49, ELSE=50, WITHOUT=51, 
		NONE=52, TRUE=53, FALSE=54, HEX_NUMBER=55, NUMBER=56, STRING=57, DELETE=58, 
		NAME=59, CLASS=60, VARIABLE=61, LOCALVARIABLE=62, RULESET=63, ELEMENT=64;
	public const int
		RULE_patch = 0, RULE_top_level_statement = 1, RULE_patch_declaration = 2, 
		RULE_patch_list = 3, RULE_import_declaration = 4, RULE_var_decl = 5, RULE_stage_def = 6, 
		RULE_function_def = 7, RULE_mixin_def = 8, RULE_top_level_conditional = 9, 
		RULE_top_level_else = 10, RULE_top_level_else_else = 11, RULE_top_level_else_if = 12, 
		RULE_selection_block = 13, RULE_attributed_selector = 14, RULE_attribute = 15, 
		RULE_constructor_arguments = 16, RULE_selector = 17, RULE_selector_no_children = 18, 
		RULE_selector_body = 19, RULE_selector_statement = 20, RULE_sel_level_conditional = 21, 
		RULE_sel_level_else = 22, RULE_sel_level_else_else = 23, RULE_sel_level_else_if = 24, 
		RULE_set_value = 25, RULE_delete_value = 26, RULE_merge_value = 27, RULE_field_set = 28, 
		RULE_index = 29, RULE_expression = 30, RULE_sub_expression = 31, RULE_value = 32, 
		RULE_list = 33, RULE_list_values = 34, RULE_obj = 35, RULE_obj_values = 36, 
		RULE_key_value = 37, RULE_argument_list = 38, RULE_argument = 39, RULE_arg_decl_list = 40, 
		RULE_arg_decl = 41, RULE_function_body = 42, RULE_function_statement = 43, 
		RULE_fn_level_conditional = 44, RULE_fn_level_else = 45, RULE_fn_level_else_else = 46, 
		RULE_fn_level_else_if = 47, RULE_fn_return = 48, RULE_mixin_include = 49, 
		RULE_for_loop = 50, RULE_each_loop = 51, RULE_while_loop = 52;
	public static readonly string[] ruleNames = {
		"patch", "top_level_statement", "patch_declaration", "patch_list", "import_declaration", 
		"var_decl", "stage_def", "function_def", "mixin_def", "top_level_conditional", 
		"top_level_else", "top_level_else_else", "top_level_else_if", "selection_block", 
		"attributed_selector", "attribute", "constructor_arguments", "selector", 
		"selector_no_children", "selector_body", "selector_statement", "sel_level_conditional", 
		"sel_level_else", "sel_level_else_else", "sel_level_else_if", "set_value", 
		"delete_value", "merge_value", "field_set", "index", "expression", "sub_expression", 
		"value", "list", "list_values", "obj", "obj_values", "key_value", "argument_list", 
		"argument", "arg_decl_list", "arg_decl", "function_body", "function_statement", 
		"fn_level_conditional", "fn_level_else", "fn_level_else_else", "fn_level_else_if", 
		"fn_return", "mixin_include", "for_loop", "each_loop", "while_loop"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'@use'", "'@function'", "'@if'", "'@else'", "'@else-if'", 
		"'@mixin'", "'@while'", "'@for'", "'from'", "'through'", "'to'", "'@each'", 
		"'in'", "'@set'", "'@merge'", "'@require'", "'@require-not'", "'@stage'", 
		"'@define-stage'", "'@include'", "'@return'", "'@patch'", "'@new'", "'{'", 
		"'}'", "'('", "')'", "'['", "']'", "';'", "':'", "','", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'!'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!='", 
		"'and'", "'or'", "'if'", "'else'", "'~'", "'null'", "'true'", "'false'", 
		null, null, null, "'@delete'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "SPACE", "USE", "FUNCTION", "PRE_IF", "PRE_ELSE", "PRE_ELSE_IF", 
		"MIXIN", "WHILE", "FOR", "FROM", "THROUGH", "TO", "EACH", "IN", "SET", 
		"MERGE", "REQUIRE", "REQUIRE_NOT", "STAGE", "DEFINE_STAGE", "INCLUDE", 
		"RETURN", "PATCH", "NEW", "LEFT_BRACE", "RIGHT_BRACE", "LEFT_PAREN", "RIGHT_PAREN", 
		"LEFT_BRACKET", "RIGHT_BRACKET", "SEMICOLON", "COLON", "COMMA", "ADD", 
		"SUBTRACT", "MULTIPLY", "DIVIDE", "MODULUS", "NOT", "GREATER_THAN", "GREATER_THAN_EQUAL", 
		"LESSER_THAN", "LESSER_THAN_EQUAL", "EQUAL_TO", "NOT_EQUAL_TO", "AND", 
		"OR", "IF", "ELSE", "WITHOUT", "NONE", "TRUE", "FALSE", "HEX_NUMBER", 
		"NUMBER", "STRING", "DELETE", "NAME", "CLASS", "VARIABLE", "LOCALVARIABLE", 
		"RULESET", "ELEMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "sassy_parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static sassy_parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public sassy_parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public sassy_parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(sassy_parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public PatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterPatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitPatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatchContext patch() {
		PatchContext _localctx = new PatchContext(Context, State);
		EnterRule(_localctx, 0, RULE_patch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 106;
				top_level_statement();
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & 3963449168577921063L) != 0) );
			State = 111;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_declarationContext import_declaration() {
			return GetRuleContext<Import_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stage_defContext stage_def() {
			return GetRuleContext<Stage_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_defContext function_def() {
			return GetRuleContext<Function_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mixin_defContext mixin_def() {
			return GetRuleContext<Mixin_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_conditionalContext top_level_conditional() {
			return GetRuleContext<Top_level_conditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selection_blockContext selection_block() {
			return GetRuleContext<Selection_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Patch_declarationContext patch_declaration() {
			return GetRuleContext<Patch_declarationContext>(0);
		}
		public Top_level_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_statementContext top_level_statement() {
		Top_level_statementContext _localctx = new Top_level_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_top_level_statement);
		try {
			State = 121;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				import_declaration();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				var_decl();
				}
				break;
			case DEFINE_STAGE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 115;
				stage_def();
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 116;
				function_def();
				}
				break;
			case MIXIN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 117;
				mixin_def();
				}
				break;
			case PRE_IF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 118;
				top_level_conditional();
				}
				break;
			case REQUIRE:
			case REQUIRE_NOT:
			case STAGE:
			case NEW:
			case LEFT_PAREN:
			case ADD:
			case MULTIPLY:
			case WITHOUT:
			case NAME:
			case CLASS:
			case RULESET:
			case ELEMENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 119;
				selection_block();
				}
				break;
			case PATCH:
				EnterOuterAlt(_localctx, 8);
				{
				State = 120;
				patch_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Patch_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATCH() { return GetToken(sassy_parser.PATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Patch_listContext patch_list() {
			return GetRuleContext<Patch_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		public Patch_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patch_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterPatch_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitPatch_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatch_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Patch_declarationContext patch_declaration() {
		Patch_declarationContext _localctx = new Patch_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_patch_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(PATCH);
			State = 124;
			patch_list();
			State = 125;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Patch_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(sassy_parser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(sassy_parser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		public Patch_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patch_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterPatch_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitPatch_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatch_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Patch_listContext patch_list() {
		Patch_listContext _localctx = new Patch_listContext(Context, State);
		EnterRule(_localctx, 6, RULE_patch_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(STRING);
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 128;
				Match(COMMA);
				State = 129;
				Match(STRING);
				}
				}
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_declarationContext : ParserRuleContext {
		public IToken imp;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(sassy_parser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Import_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImport_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImport_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_declarationContext import_declaration() {
		Import_declarationContext _localctx = new Import_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_import_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(USE);
			State = 136;
			_localctx.imp = Match(STRING);
			State = 137;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		public IToken variable;
		public ExpressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterVar_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitVar_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 10, RULE_var_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			_localctx.variable = Match(VARIABLE);
			State = 140;
			Match(COLON);
			State = 141;
			_localctx.val = expression();
			State = 142;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stage_defContext : ParserRuleContext {
		public IToken stage;
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE_STAGE() { return GetToken(sassy_parser.DEFINE_STAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(sassy_parser.NUMBER, 0); }
		public Stage_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterStage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitStage_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStage_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stage_defContext stage_def() {
		Stage_defContext _localctx = new Stage_defContext(Context, State);
		EnterRule(_localctx, 12, RULE_stage_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(DEFINE_STAGE);
			State = 145;
			_localctx.stage = Match(STRING);
			State = 146;
			Match(COMMA);
			State = 147;
			_localctx.priority = Match(NUMBER);
			State = 148;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_defContext : ParserRuleContext {
		public IToken name;
		public Arg_decl_listContext args;
		public Function_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(sassy_parser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_decl_listContext arg_decl_list() {
			return GetRuleContext<Arg_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public Function_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFunction_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFunction_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_defContext function_def() {
		Function_defContext _localctx = new Function_defContext(Context, State);
		EnterRule(_localctx, 14, RULE_function_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(FUNCTION);
			State = 151;
			_localctx.name = Match(ELEMENT);
			State = 152;
			Match(LEFT_PAREN);
			State = 153;
			_localctx.args = arg_decl_list();
			State = 154;
			Match(RIGHT_PAREN);
			State = 155;
			Match(LEFT_BRACE);
			State = 156;
			_localctx.body = function_body();
			State = 157;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixin_defContext : ParserRuleContext {
		public IToken name;
		public Arg_decl_listContext args;
		public Selector_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIXIN() { return GetToken(sassy_parser.MIXIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_decl_listContext arg_decl_list() {
			return GetRuleContext<Arg_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_bodyContext selector_body() {
			return GetRuleContext<Selector_bodyContext>(0);
		}
		public Mixin_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixin_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMixin_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMixin_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMixin_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mixin_defContext mixin_def() {
		Mixin_defContext _localctx = new Mixin_defContext(Context, State);
		EnterRule(_localctx, 16, RULE_mixin_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			Match(MIXIN);
			State = 160;
			_localctx.name = Match(ELEMENT);
			State = 161;
			Match(LEFT_PAREN);
			State = 162;
			_localctx.args = arg_decl_list();
			State = 163;
			Match(RIGHT_PAREN);
			State = 164;
			Match(LEFT_BRACE);
			State = 165;
			_localctx.body = selector_body();
			State = 166;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_conditionalContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Top_level_statementContext body;
		public Top_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_IF() { return GetToken(sassy_parser.PRE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_elseContext top_level_else() {
			return GetRuleContext<Top_level_elseContext>(0);
		}
		public Top_level_conditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_conditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_conditionalContext top_level_conditional() {
		Top_level_conditionalContext _localctx = new Top_level_conditionalContext(Context, State);
		EnterRule(_localctx, 18, RULE_top_level_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(PRE_IF);
			State = 169;
			_localctx.cond = sub_expression(0);
			State = 170;
			Match(LEFT_BRACE);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & 3963449168577921063L) != 0)) {
				{
				{
				State = 171;
				_localctx.body = top_level_statement();
				}
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 177;
			Match(RIGHT_BRACE);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 178;
				_localctx.els = top_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_else_elseContext top_level_else_else() {
			return GetRuleContext<Top_level_else_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_else_ifContext top_level_else_if() {
			return GetRuleContext<Top_level_else_ifContext>(0);
		}
		public Top_level_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_elseContext top_level_else() {
		Top_level_elseContext _localctx = new Top_level_elseContext(Context, State);
		EnterRule(_localctx, 20, RULE_top_level_else);
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRE_ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181;
				top_level_else_else();
				}
				break;
			case PRE_ELSE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182;
				top_level_else_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_else_elseContext : ParserRuleContext {
		public Top_level_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE() { return GetToken(sassy_parser.PRE_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public Top_level_else_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_else_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_else_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_else_elseContext top_level_else_else() {
		Top_level_else_elseContext _localctx = new Top_level_else_elseContext(Context, State);
		EnterRule(_localctx, 22, RULE_top_level_else_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(PRE_ELSE);
			State = 186;
			Match(LEFT_BRACE);
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & 3963449168577921063L) != 0)) {
				{
				{
				State = 187;
				_localctx.body = top_level_statement();
				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 193;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_else_ifContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Top_level_statementContext body;
		public Top_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE_IF() { return GetToken(sassy_parser.PRE_ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_elseContext top_level_else() {
			return GetRuleContext<Top_level_elseContext>(0);
		}
		public Top_level_else_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_else_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTop_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTop_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_else_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_else_ifContext top_level_else_if() {
		Top_level_else_ifContext _localctx = new Top_level_else_ifContext(Context, State);
		EnterRule(_localctx, 24, RULE_top_level_else_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(PRE_ELSE_IF);
			State = 196;
			_localctx.cond = sub_expression(0);
			State = 197;
			Match(LEFT_BRACE);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & 3963449168577921063L) != 0)) {
				{
				{
				State = 198;
				_localctx.body = top_level_statement();
				}
				}
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 204;
			Match(RIGHT_BRACE);
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 205;
				_localctx.els = top_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Attributed_selectorContext attributed_selector() {
			return GetRuleContext<Attributed_selectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_bodyContext selector_body() {
			return GetRuleContext<Selector_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		public Selection_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSelection_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSelection_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selection_blockContext selection_block() {
		Selection_blockContext _localctx = new Selection_blockContext(Context, State);
		EnterRule(_localctx, 26, RULE_selection_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			attributed_selector();
			State = 209;
			Match(LEFT_BRACE);
			State = 210;
			selector_body();
			State = 211;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attributed_selectorContext : ParserRuleContext {
		public AttributeContext attributes;
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Attributed_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributed_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAttributed_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAttributed_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributed_selector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attributed_selectorContext attributed_selector() {
		Attributed_selectorContext _localctx = new Attributed_selectorContext(Context, State);
		EnterRule(_localctx, 28, RULE_attributed_selector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35389440L) != 0)) {
				{
				{
				State = 213;
				_localctx.attributes = attribute();
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 219;
			selector(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
	 
		public AttributeContext() { }
		public virtual void CopyFrom(AttributeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Run_at_stageContext : AttributeContext {
		public IToken stage;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAGE() { return GetToken(sassy_parser.STAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Run_at_stageContext(AttributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRun_at_stage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRun_at_stage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRun_at_stage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_not_modContext : AttributeContext {
		public IToken guid;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_NOT() { return GetToken(sassy_parser.REQUIRE_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Require_not_modContext(AttributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_not_mod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_not_mod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_not_mod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Require_modContext : AttributeContext {
		public IToken guid;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(sassy_parser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public Require_modContext(AttributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRequire_mod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRequire_mod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequire_mod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class New_assetContext : AttributeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(sassy_parser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_argumentsContext constructor_arguments() {
			return GetRuleContext<Constructor_argumentsContext>(0);
		}
		public New_assetContext(AttributeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNew_asset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNew_asset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_asset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 30, RULE_attribute);
		try {
			State = 229;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REQUIRE:
				_localctx = new Require_modContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 221;
				Match(REQUIRE);
				State = 222;
				((Require_modContext)_localctx).guid = Match(STRING);
				}
				break;
			case REQUIRE_NOT:
				_localctx = new Require_not_modContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 223;
				Match(REQUIRE_NOT);
				State = 224;
				((Require_not_modContext)_localctx).guid = Match(STRING);
				}
				break;
			case STAGE:
				_localctx = new Run_at_stageContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 225;
				Match(STAGE);
				State = 226;
				((Run_at_stageContext)_localctx).stage = Match(STRING);
				}
				break;
			case NEW:
				_localctx = new New_assetContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 227;
				Match(NEW);
				State = 228;
				constructor_arguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_argumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		public Constructor_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterConstructor_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitConstructor_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_argumentsContext constructor_arguments() {
		Constructor_argumentsContext _localctx = new Constructor_argumentsContext(Context, State);
		EnterRule(_localctx, 32, RULE_constructor_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(LEFT_PAREN);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & 1618762692082794497L) != 0)) {
				{
				State = 232;
				expression();
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 233;
					Match(COMMA);
					State = 234;
					expression();
					}
					}
					State = 239;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 242;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
	 
		public SelectorContext() { }
		public virtual void CopyFrom(SelectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Sel_elementContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Sel_elementContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_rulesetContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULESET() { return GetToken(sassy_parser.RULESET, 0); }
		public Sel_rulesetContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_ruleset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_ruleset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_ruleset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_childContext : SelectorContext {
		public SelectorContext parent;
		public Selector_no_childrenContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(sassy_parser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sel_childContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_child(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_child(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_child(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_add_elementContext : SelectorContext {
		public IToken element;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Sel_add_elementContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_add_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_add_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_add_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_classContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Sel_classContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_nameContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public Sel_nameContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_intersectionContext : SelectorContext {
		public SelectorContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sel_intersectionContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_intersection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_intersection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_intersection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_everythingContext : SelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		public Sel_everythingContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_everything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_everything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_everything(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_without_classContext : SelectorContext {
		public IToken field;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Sel_without_classContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_without_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_without_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_without_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_without_nameContext : SelectorContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public Sel_without_nameContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_without_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_without_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_without_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_combinationContext : SelectorContext {
		public SelectorContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sel_combinationContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_combination(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_combination(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_combination(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sel_subContext : SelectorContext {
		public SelectorContext internal_selector;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public Sel_subContext(SelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_sub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		return selector(0);
	}

	private SelectorContext selector(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SelectorContext _localctx = new SelectorContext(Context, _parentState);
		SelectorContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_selector, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				_localctx = new Sel_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 245;
				Match(ELEMENT);
				}
				break;
			case 2:
				{
				_localctx = new Sel_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 246;
				Match(CLASS);
				}
				break;
			case 3:
				{
				_localctx = new Sel_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 247;
				Match(NAME);
				}
				break;
			case 4:
				{
				_localctx = new Sel_rulesetContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 248;
				Match(RULESET);
				}
				break;
			case 5:
				{
				_localctx = new Sel_subContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 249;
				Match(LEFT_PAREN);
				State = 250;
				((Sel_subContext)_localctx).internal_selector = selector(0);
				State = 251;
				Match(RIGHT_PAREN);
				}
				break;
			case 6:
				{
				_localctx = new Sel_add_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 253;
				Match(ADD);
				State = 254;
				((Sel_add_elementContext)_localctx).element = Match(ELEMENT);
				}
				break;
			case 7:
				{
				_localctx = new Sel_without_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 255;
				Match(WITHOUT);
				State = 256;
				((Sel_without_classContext)_localctx).field = Match(CLASS);
				}
				break;
			case 8:
				{
				_localctx = new Sel_without_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 257;
				Match(WITHOUT);
				State = 258;
				((Sel_without_nameContext)_localctx).name = Match(NAME);
				}
				break;
			case 9:
				{
				_localctx = new Sel_everythingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 259;
				Match(MULTIPLY);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 272;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 270;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new Sel_combinationContext(new SelectorContext(_parentctx, _parentState));
						((Sel_combinationContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector);
						State = 262;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 263;
						Match(COMMA);
						State = 264;
						((Sel_combinationContext)_localctx).rhs = selector_no_children(0);
						}
						break;
					case 2:
						{
						_localctx = new Sel_childContext(new SelectorContext(_parentctx, _parentState));
						((Sel_childContext)_localctx).parent = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector);
						State = 265;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 266;
						Match(GREATER_THAN);
						State = 267;
						((Sel_childContext)_localctx).child = selector_no_children(0);
						}
						break;
					case 3:
						{
						_localctx = new Sel_intersectionContext(new SelectorContext(_parentctx, _parentState));
						((Sel_intersectionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector);
						State = 268;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 269;
						((Sel_intersectionContext)_localctx).rhs = selector_no_children(0);
						}
						break;
					}
					} 
				}
				State = 274;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Selector_no_childrenContext : ParserRuleContext {
		public Selector_no_childrenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_no_children; } }
	 
		public Selector_no_childrenContext() { }
		public virtual void CopyFrom(Selector_no_childrenContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Ruleset_selectorContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULESET() { return GetToken(sassy_parser.RULESET, 0); }
		public Ruleset_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRuleset_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRuleset_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleset_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Combination_selectorContext : Selector_no_childrenContext {
		public Selector_no_childrenContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext[] selector_no_children() {
			return GetRuleContexts<Selector_no_childrenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children(int i) {
			return GetRuleContext<Selector_no_childrenContext>(i);
		}
		public Combination_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterCombination_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitCombination_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombination_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Without_nameContext : Selector_no_childrenContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public Without_nameContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterWithout_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitWithout_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithout_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sub_selectorContext : Selector_no_childrenContext {
		public Selector_no_childrenContext internal_selector;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children() {
			return GetRuleContext<Selector_no_childrenContext>(0);
		}
		public Sub_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSub_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSub_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Class_selectorContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Class_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterClass_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitClass_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Without_classContext : Selector_no_childrenContext {
		public IToken field;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(sassy_parser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Without_classContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterWithout_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitWithout_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithout_class(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(sassy_parser.NAME, 0); }
		public NameContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Add_elementContext : Selector_no_childrenContext {
		public IToken element;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Add_elementContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAdd_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAdd_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_element(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EverythingContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		public EverythingContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterEverything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitEverything(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEverything(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Intersection_selectorContext : Selector_no_childrenContext {
		public Selector_no_childrenContext lhs;
		public Selector_no_childrenContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext[] selector_no_children() {
			return GetRuleContexts<Selector_no_childrenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_no_childrenContext selector_no_children(int i) {
			return GetRuleContext<Selector_no_childrenContext>(i);
		}
		public Intersection_selectorContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterIntersection_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitIntersection_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntersection_selector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElementContext : Selector_no_childrenContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public ElementContext(Selector_no_childrenContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selector_no_childrenContext selector_no_children() {
		return selector_no_children(0);
	}

	private Selector_no_childrenContext selector_no_children(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Selector_no_childrenContext _localctx = new Selector_no_childrenContext(Context, _parentState);
		Selector_no_childrenContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_selector_no_children, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				_localctx = new ElementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 276;
				Match(ELEMENT);
				}
				break;
			case 2:
				{
				_localctx = new Class_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 277;
				Match(CLASS);
				}
				break;
			case 3:
				{
				_localctx = new NameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 278;
				Match(NAME);
				}
				break;
			case 4:
				{
				_localctx = new Ruleset_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 279;
				Match(RULESET);
				}
				break;
			case 5:
				{
				_localctx = new Sub_selectorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 280;
				Match(LEFT_PAREN);
				State = 281;
				((Sub_selectorContext)_localctx).internal_selector = selector_no_children(0);
				State = 282;
				Match(RIGHT_PAREN);
				}
				break;
			case 6:
				{
				_localctx = new Add_elementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 284;
				Match(ADD);
				State = 285;
				((Add_elementContext)_localctx).element = Match(ELEMENT);
				}
				break;
			case 7:
				{
				_localctx = new Without_classContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 286;
				Match(WITHOUT);
				State = 287;
				((Without_classContext)_localctx).field = Match(CLASS);
				}
				break;
			case 8:
				{
				_localctx = new Without_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 288;
				Match(WITHOUT);
				State = 289;
				((Without_nameContext)_localctx).name = Match(NAME);
				}
				break;
			case 9:
				{
				_localctx = new EverythingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 290;
				Match(MULTIPLY);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 300;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 298;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						_localctx = new Combination_selectorContext(new Selector_no_childrenContext(_parentctx, _parentState));
						((Combination_selectorContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector_no_children);
						State = 293;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 294;
						Match(COMMA);
						State = 295;
						((Combination_selectorContext)_localctx).rhs = selector_no_children(7);
						}
						break;
					case 2:
						{
						_localctx = new Intersection_selectorContext(new Selector_no_childrenContext(_parentctx, _parentState));
						((Intersection_selectorContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selector_no_children);
						State = 296;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 297;
						((Intersection_selectorContext)_localctx).rhs = selector_no_children(6);
						}
						break;
					}
					} 
				}
				State = 302;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Selector_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		public Selector_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSelector_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSelector_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selector_bodyContext selector_body() {
		Selector_bodyContext _localctx = new Selector_bodyContext(Context, State);
		EnterRule(_localctx, 38, RULE_selector_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 1004373091026139137L) != 0)) {
				{
				{
				State = 303;
				selector_statement();
				}
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selector_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_conditionalContext sel_level_conditional() {
			return GetRuleContext<Sel_level_conditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_valueContext set_value() {
			return GetRuleContext<Set_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_valueContext delete_value() {
			return GetRuleContext<Delete_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_valueContext merge_value() {
			return GetRuleContext<Merge_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_setContext field_set() {
			return GetRuleContext<Field_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selection_blockContext selection_block() {
			return GetRuleContext<Selection_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mixin_includeContext mixin_include() {
			return GetRuleContext<Mixin_includeContext>(0);
		}
		public Selector_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSelector_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSelector_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selector_statementContext selector_statement() {
		Selector_statementContext _localctx = new Selector_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_selector_statement);
		try {
			State = 317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 309;
				var_decl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310;
				sel_level_conditional();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 311;
				set_value();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 312;
				delete_value();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 313;
				merge_value();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 314;
				field_set();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 315;
				selection_block();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 316;
				mixin_include();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_conditionalContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Selector_statementContext body;
		public Sel_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_IF() { return GetToken(sassy_parser.PRE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_elseContext sel_level_else() {
			return GetRuleContext<Sel_level_elseContext>(0);
		}
		public Sel_level_conditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_conditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_conditionalContext sel_level_conditional() {
		Sel_level_conditionalContext _localctx = new Sel_level_conditionalContext(Context, State);
		EnterRule(_localctx, 42, RULE_sel_level_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			Match(PRE_IF);
			State = 320;
			_localctx.cond = sub_expression(0);
			State = 321;
			Match(LEFT_BRACE);
			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 1004373091026139137L) != 0)) {
				{
				{
				State = 322;
				_localctx.body = selector_statement();
				}
				}
				State = 327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 328;
			Match(RIGHT_BRACE);
			State = 330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 329;
				_localctx.els = sel_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_else_elseContext sel_level_else_else() {
			return GetRuleContext<Sel_level_else_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_else_ifContext sel_level_else_if() {
			return GetRuleContext<Sel_level_else_ifContext>(0);
		}
		public Sel_level_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_elseContext sel_level_else() {
		Sel_level_elseContext _localctx = new Sel_level_elseContext(Context, State);
		EnterRule(_localctx, 44, RULE_sel_level_else);
		try {
			State = 334;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRE_ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 332;
				sel_level_else_else();
				}
				break;
			case PRE_ELSE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 333;
				sel_level_else_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_else_elseContext : ParserRuleContext {
		public Selector_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE() { return GetToken(sassy_parser.PRE_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		public Sel_level_else_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_else_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_else_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_else_elseContext sel_level_else_else() {
		Sel_level_else_elseContext _localctx = new Sel_level_else_elseContext(Context, State);
		EnterRule(_localctx, 46, RULE_sel_level_else_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			Match(PRE_ELSE);
			State = 337;
			Match(LEFT_BRACE);
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 1004373091026139137L) != 0)) {
				{
				{
				State = 338;
				_localctx.body = selector_statement();
				}
				}
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 344;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_level_else_ifContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Selector_statementContext body;
		public Sel_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE_IF() { return GetToken(sassy_parser.PRE_ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext[] selector_statement() {
			return GetRuleContexts<Selector_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_statementContext selector_statement(int i) {
			return GetRuleContext<Selector_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sel_level_elseContext sel_level_else() {
			return GetRuleContext<Sel_level_elseContext>(0);
		}
		public Sel_level_else_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_level_else_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSel_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSel_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_level_else_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_level_else_ifContext sel_level_else_if() {
		Sel_level_else_ifContext _localctx = new Sel_level_else_ifContext(Context, State);
		EnterRule(_localctx, 48, RULE_sel_level_else_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			Match(PRE_ELSE_IF);
			State = 347;
			_localctx.cond = sub_expression(0);
			State = 348;
			Match(LEFT_BRACE);
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 1004373091026139137L) != 0)) {
				{
				{
				State = 349;
				_localctx.body = selector_statement();
				}
				}
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 355;
			Match(RIGHT_BRACE);
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 356;
				_localctx.els = sel_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_valueContext : ParserRuleContext {
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(sassy_parser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Set_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSet_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSet_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_valueContext set_value() {
		Set_valueContext _localctx = new Set_valueContext(Context, State);
		EnterRule(_localctx, 50, RULE_set_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			Match(SET);
			State = 360;
			_localctx.expr = expression();
			State = 361;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(sassy_parser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		public Delete_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterDelete_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitDelete_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_valueContext delete_value() {
		Delete_valueContext _localctx = new Delete_valueContext(Context, State);
		EnterRule(_localctx, 52, RULE_delete_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			Match(DELETE);
			State = 364;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_valueContext : ParserRuleContext {
		public Sub_expressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(sassy_parser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Merge_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMerge_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMerge_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_valueContext merge_value() {
		Merge_valueContext _localctx = new Merge_valueContext(Context, State);
		EnterRule(_localctx, 54, RULE_merge_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			Match(MERGE);
			State = 367;
			_localctx.expr = sub_expression(0);
			State = 368;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_setContext : ParserRuleContext {
		public Field_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_set; } }
	 
		public Field_setContext() { }
		public virtual void CopyFrom(Field_setContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class String_key_fieldContext : Field_setContext {
		public IndexContext indexor;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		public String_key_fieldContext(Field_setContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_key_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_key_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_key_field(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Element_key_fieldContext : Field_setContext {
		public IndexContext indexor;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		public Element_key_fieldContext(Field_setContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterElement_key_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitElement_key_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_key_field(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_setContext field_set() {
		Field_setContext _localctx = new Field_setContext(Context, State);
		EnterRule(_localctx, 56, RULE_field_set);
		int _la;
		try {
			State = 386;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELEMENT:
				_localctx = new Element_key_fieldContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 370;
				Match(ELEMENT);
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_BRACKET) {
					{
					State = 371;
					((Element_key_fieldContext)_localctx).indexor = index();
					}
				}

				State = 374;
				Match(COLON);
				State = 375;
				((Element_key_fieldContext)_localctx).expr = expression();
				State = 376;
				Match(SEMICOLON);
				}
				break;
			case STRING:
				_localctx = new String_key_fieldContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 378;
				Match(STRING);
				State = 380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_BRACKET) {
					{
					State = 379;
					((String_key_fieldContext)_localctx).indexor = index();
					}
				}

				State = 382;
				Match(COLON);
				State = 383;
				((String_key_fieldContext)_localctx).expr = expression();
				State = 384;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
	 
		public IndexContext() { }
		public virtual void CopyFrom(IndexContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class String_indexorContext : IndexContext {
		public IToken elem;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public String_indexorContext(IndexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_indexor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Element_indexorContext : IndexContext {
		public IToken elem;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		public Element_indexorContext(IndexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterElement_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitElement_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_indexor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Number_indexorContext : IndexContext {
		public IToken num;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(sassy_parser.NUMBER, 0); }
		public Number_indexorContext(IndexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNumber_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNumber_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_indexor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Class_indexorContext : IndexContext {
		public IToken clazz;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(sassy_parser.CLASS, 0); }
		public Class_indexorContext(IndexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterClass_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitClass_indexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_indexor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 58, RULE_index);
		try {
			State = 400;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				_localctx = new Number_indexorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 388;
				Match(LEFT_BRACKET);
				State = 389;
				((Number_indexorContext)_localctx).num = Match(NUMBER);
				State = 390;
				Match(RIGHT_BRACKET);
				}
				break;
			case 2:
				_localctx = new Element_indexorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 391;
				Match(LEFT_BRACKET);
				State = 392;
				((Element_indexorContext)_localctx).elem = Match(ELEMENT);
				State = 393;
				Match(RIGHT_BRACKET);
				}
				break;
			case 3:
				_localctx = new Class_indexorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 394;
				Match(LEFT_BRACKET);
				State = 395;
				((Class_indexorContext)_localctx).clazz = Match(CLASS);
				State = 396;
				Match(RIGHT_BRACKET);
				}
				break;
			case 4:
				_localctx = new String_indexorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 397;
				Match(LEFT_BRACKET);
				State = 398;
				((String_indexorContext)_localctx).elem = Match(STRING);
				State = 399;
				Match(RIGHT_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Implicit_divideContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(sassy_parser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Implicit_divideContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImplicit_divide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImplicit_divide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_divide(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NormalContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public NormalContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Implicit_multiplyContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Implicit_multiplyContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImplicit_multiply(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImplicit_multiply(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_multiply(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Implicit_addContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Implicit_addContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImplicit_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImplicit_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_add(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Implicit_subtractContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(sassy_parser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Implicit_subtractContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterImplicit_subtract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitImplicit_subtract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_subtract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_expression);
		try {
			State = 411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				_localctx = new Implicit_addContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 402;
				Match(ADD);
				State = 403;
				sub_expression(0);
				}
				break;
			case 2:
				_localctx = new Implicit_subtractContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 404;
				Match(SUBTRACT);
				State = 405;
				sub_expression(0);
				}
				break;
			case 3:
				_localctx = new Implicit_multiplyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 406;
				Match(MULTIPLY);
				State = 407;
				sub_expression(0);
				}
				break;
			case 4:
				_localctx = new Implicit_divideContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 408;
				Match(DIVIDE);
				State = 409;
				sub_expression(0);
				}
				break;
			case 5:
				_localctx = new NormalContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 410;
				sub_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sub_expressionContext : ParserRuleContext {
		public Sub_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub_expression; } }
	 
		public Sub_expressionContext() { }
		public virtual void CopyFrom(Sub_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Not_equal_toContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL_TO() { return GetToken(sassy_parser.NOT_EQUAL_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public Not_equal_toContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNot_equal_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNot_equal_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot_equal_to(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Variable_referenceContext : Sub_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		public Variable_referenceContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterVariable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitVariable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_reference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Equal_toContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_TO() { return GetToken(sassy_parser.EQUAL_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public Equal_toContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterEqual_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitEqual_to(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqual_to(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Local_variable_referenceContext : Sub_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALVARIABLE() { return GetToken(sassy_parser.LOCALVARIABLE, 0); }
		public Local_variable_referenceContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_reference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Member_call_rulesetContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULESET() { return GetToken(sassy_parser.RULESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Member_call_rulesetContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMember_call_ruleset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMember_call_ruleset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_call_ruleset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Value_referenceContext : Sub_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Value_referenceContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterValue_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitValue_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_reference(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractionContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(sassy_parser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public SubtractionContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisionContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(sassy_parser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public DivisionContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegativeContext : Sub_expressionContext {
		public Sub_expressionContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTRACT() { return GetToken(sassy_parser.SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public NegativeContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNegative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNegative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : Sub_expressionContext {
		public Sub_expressionContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(sassy_parser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public NotContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lesser_thanContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSER_THAN() { return GetToken(sassy_parser.LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public Lesser_thanContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLesser_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLesser_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLesser_than(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Member_callContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public IToken name;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Member_callContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMember_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMember_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_call(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Greater_thanContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(sassy_parser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public Greater_thanContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterGreater_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitGreater_than(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreater_than(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(sassy_parser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public AndContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sub_sub_expressionContext : Sub_expressionContext {
		public Sub_expressionContext internal_expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Sub_sub_expressionContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSub_sub_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSub_sub_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_sub_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(sassy_parser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public MultiplicationContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Greater_than_equalContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_EQUAL() { return GetToken(sassy_parser.GREATER_THAN_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public Greater_than_equalContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterGreater_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitGreater_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreater_than_equal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public AdditionContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexorContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public IndexorContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterIndexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitIndexor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(sassy_parser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public OrContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Lesser_than_equalContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSER_THAN_EQUAL() { return GetToken(sassy_parser.LESSER_THAN_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public Lesser_than_equalContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLesser_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLesser_than_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLesser_than_equal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PositiveContext : Sub_expressionContext {
		public Sub_expressionContext child;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(sassy_parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public PositiveContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterPositive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitPositive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Simple_callContext : Sub_expressionContext {
		public IToken lhs;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Simple_callContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterSimple_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitSimple_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_call(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RemainderContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULUS() { return GetToken(sassy_parser.MODULUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public RemainderContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterRemainder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitRemainder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemainder(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryContext : Sub_expressionContext {
		public Sub_expressionContext lhs;
		public Sub_expressionContext cond;
		public Sub_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(sassy_parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(sassy_parser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		public TernaryContext(Sub_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sub_expressionContext sub_expression() {
		return sub_expression(0);
	}

	private Sub_expressionContext sub_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Sub_expressionContext _localctx = new Sub_expressionContext(Context, _parentState);
		Sub_expressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_sub_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNCTION:
			case LEFT_BRACE:
			case LEFT_BRACKET:
			case NONE:
			case TRUE:
			case FALSE:
			case NUMBER:
			case STRING:
			case DELETE:
				{
				_localctx = new Value_referenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 414;
				value();
				}
				break;
			case VARIABLE:
				{
				_localctx = new Variable_referenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 415;
				Match(VARIABLE);
				}
				break;
			case LOCALVARIABLE:
				{
				_localctx = new Local_variable_referenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 416;
				Match(LOCALVARIABLE);
				}
				break;
			case LEFT_PAREN:
				{
				_localctx = new Sub_sub_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 417;
				Match(LEFT_PAREN);
				State = 418;
				((Sub_sub_expressionContext)_localctx).internal_expr = sub_expression(0);
				State = 419;
				Match(RIGHT_PAREN);
				}
				break;
			case SUBTRACT:
				{
				_localctx = new NegativeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 421;
				Match(SUBTRACT);
				State = 422;
				((NegativeContext)_localctx).child = sub_expression(21);
				}
				break;
			case ADD:
				{
				_localctx = new PositiveContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 423;
				Match(ADD);
				State = 424;
				((PositiveContext)_localctx).child = sub_expression(20);
				}
				break;
			case NOT:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 425;
				Match(NOT);
				State = 426;
				((NotContext)_localctx).child = sub_expression(19);
				}
				break;
			case ELEMENT:
				{
				_localctx = new Simple_callContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 427;
				((Simple_callContext)_localctx).lhs = Match(ELEMENT);
				State = 428;
				Match(LEFT_PAREN);
				State = 429;
				((Simple_callContext)_localctx).args = argument_list();
				State = 430;
				Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 499;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 497;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationContext(new Sub_expressionContext(_parentctx, _parentState));
						((MultiplicationContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 434;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 435;
						Match(MULTIPLY);
						State = 436;
						((MultiplicationContext)_localctx).rhs = sub_expression(15);
						}
						break;
					case 2:
						{
						_localctx = new DivisionContext(new Sub_expressionContext(_parentctx, _parentState));
						((DivisionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 437;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 438;
						Match(DIVIDE);
						State = 439;
						((DivisionContext)_localctx).rhs = sub_expression(14);
						}
						break;
					case 3:
						{
						_localctx = new RemainderContext(new Sub_expressionContext(_parentctx, _parentState));
						((RemainderContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 440;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 441;
						Match(MODULUS);
						State = 442;
						((RemainderContext)_localctx).rhs = sub_expression(13);
						}
						break;
					case 4:
						{
						_localctx = new AdditionContext(new Sub_expressionContext(_parentctx, _parentState));
						((AdditionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 443;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 444;
						Match(ADD);
						State = 445;
						((AdditionContext)_localctx).rhs = sub_expression(12);
						}
						break;
					case 5:
						{
						_localctx = new SubtractionContext(new Sub_expressionContext(_parentctx, _parentState));
						((SubtractionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 446;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 447;
						Match(SUBTRACT);
						State = 448;
						((SubtractionContext)_localctx).rhs = sub_expression(11);
						}
						break;
					case 6:
						{
						_localctx = new Greater_thanContext(new Sub_expressionContext(_parentctx, _parentState));
						((Greater_thanContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 449;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 450;
						Match(GREATER_THAN);
						State = 451;
						((Greater_thanContext)_localctx).rhs = sub_expression(10);
						}
						break;
					case 7:
						{
						_localctx = new Lesser_thanContext(new Sub_expressionContext(_parentctx, _parentState));
						((Lesser_thanContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 452;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 453;
						Match(LESSER_THAN);
						State = 454;
						((Lesser_thanContext)_localctx).rhs = sub_expression(9);
						}
						break;
					case 8:
						{
						_localctx = new Greater_than_equalContext(new Sub_expressionContext(_parentctx, _parentState));
						((Greater_than_equalContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 455;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 456;
						Match(GREATER_THAN_EQUAL);
						State = 457;
						((Greater_than_equalContext)_localctx).rhs = sub_expression(8);
						}
						break;
					case 9:
						{
						_localctx = new Lesser_than_equalContext(new Sub_expressionContext(_parentctx, _parentState));
						((Lesser_than_equalContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 458;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 459;
						Match(LESSER_THAN_EQUAL);
						State = 460;
						((Lesser_than_equalContext)_localctx).rhs = sub_expression(7);
						}
						break;
					case 10:
						{
						_localctx = new Equal_toContext(new Sub_expressionContext(_parentctx, _parentState));
						((Equal_toContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 461;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 462;
						Match(EQUAL_TO);
						State = 463;
						((Equal_toContext)_localctx).rhs = sub_expression(6);
						}
						break;
					case 11:
						{
						_localctx = new Not_equal_toContext(new Sub_expressionContext(_parentctx, _parentState));
						((Not_equal_toContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 464;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 465;
						Match(NOT_EQUAL_TO);
						State = 466;
						((Not_equal_toContext)_localctx).rhs = sub_expression(5);
						}
						break;
					case 12:
						{
						_localctx = new AndContext(new Sub_expressionContext(_parentctx, _parentState));
						((AndContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 467;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 468;
						Match(AND);
						State = 469;
						((AndContext)_localctx).rhs = sub_expression(4);
						}
						break;
					case 13:
						{
						_localctx = new OrContext(new Sub_expressionContext(_parentctx, _parentState));
						((OrContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 470;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 471;
						Match(OR);
						State = 472;
						((OrContext)_localctx).rhs = sub_expression(3);
						}
						break;
					case 14:
						{
						_localctx = new TernaryContext(new Sub_expressionContext(_parentctx, _parentState));
						((TernaryContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 473;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 474;
						Match(IF);
						State = 475;
						((TernaryContext)_localctx).cond = sub_expression(0);
						State = 476;
						Match(ELSE);
						State = 477;
						((TernaryContext)_localctx).rhs = sub_expression(2);
						}
						break;
					case 15:
						{
						_localctx = new Member_callContext(new Sub_expressionContext(_parentctx, _parentState));
						((Member_callContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 479;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 480;
						Match(COLON);
						State = 481;
						((Member_callContext)_localctx).name = Match(ELEMENT);
						State = 482;
						Match(LEFT_PAREN);
						State = 483;
						((Member_callContext)_localctx).args = argument_list();
						State = 484;
						Match(RIGHT_PAREN);
						}
						break;
					case 16:
						{
						_localctx = new Member_call_rulesetContext(new Sub_expressionContext(_parentctx, _parentState));
						((Member_call_rulesetContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 486;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 487;
						Match(RULESET);
						State = 488;
						Match(LEFT_PAREN);
						State = 489;
						((Member_call_rulesetContext)_localctx).args = argument_list();
						State = 490;
						Match(RIGHT_PAREN);
						}
						break;
					case 17:
						{
						_localctx = new IndexorContext(new Sub_expressionContext(_parentctx, _parentState));
						((IndexorContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_sub_expression);
						State = 492;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 493;
						Match(LEFT_BRACKET);
						State = 494;
						((IndexorContext)_localctx).rhs = sub_expression(0);
						State = 495;
						Match(RIGHT_BRACKET);
						}
						break;
					}
					} 
				}
				State = 501;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class List_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public List_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterList_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitList_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Number_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(sassy_parser.NUMBER, 0); }
		public Number_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNumber_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNumber_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class String_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		public String_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Boolean_falseContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(sassy_parser.FALSE, 0); }
		public Boolean_falseContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterBoolean_false(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitBoolean_false(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_false(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Object_valueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public Object_valueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterObject_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitObject_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_value(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoneContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(sassy_parser.NONE, 0); }
		public NoneContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNone(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClosureContext : ValueContext {
		public Arg_decl_listContext args;
		public Function_bodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(sassy_parser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_decl_listContext arg_decl_list() {
			return GetRuleContext<Arg_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public ClosureContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterClosure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitClosure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosure(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Value_deletionContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(sassy_parser.DELETE, 0); }
		public Value_deletionContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterValue_deletion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitValue_deletion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_deletion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Boolean_trueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(sassy_parser.TRUE, 0); }
		public Boolean_trueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterBoolean_true(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitBoolean_true(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_true(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 64, RULE_value);
		try {
			State = 518;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DELETE:
				_localctx = new Value_deletionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 502;
				Match(DELETE);
				}
				break;
			case TRUE:
				_localctx = new Boolean_trueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 503;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new Boolean_falseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 504;
				Match(FALSE);
				}
				break;
			case NUMBER:
				_localctx = new Number_valueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 505;
				Match(NUMBER);
				}
				break;
			case STRING:
				_localctx = new String_valueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 506;
				Match(STRING);
				}
				break;
			case NONE:
				_localctx = new NoneContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 507;
				Match(NONE);
				}
				break;
			case FUNCTION:
				_localctx = new ClosureContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 508;
				Match(FUNCTION);
				State = 509;
				Match(LEFT_PAREN);
				State = 510;
				((ClosureContext)_localctx).args = arg_decl_list();
				State = 511;
				Match(RIGHT_PAREN);
				State = 512;
				Match(LEFT_BRACE);
				State = 513;
				((ClosureContext)_localctx).body = function_body();
				State = 514;
				Match(RIGHT_BRACE);
				}
				break;
			case LEFT_BRACKET:
				_localctx = new List_valueContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 516;
				list();
				}
				break;
			case LEFT_BRACE:
				_localctx = new Object_valueContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 517;
				obj();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public List_valuesContext @values;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(sassy_parser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(sassy_parser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public List_valuesContext list_values() {
			return GetRuleContext<List_valuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 66, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			Match(LEFT_BRACKET);
			State = 521;
			_localctx.@values = list_values();
			State = 523;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 522;
				Match(COMMA);
				}
			}

			State = 525;
			Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_valuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		public List_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_values; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterList_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitList_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_values(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_valuesContext list_values() {
		List_valuesContext _localctx = new List_valuesContext(Context, State);
		EnterRule(_localctx, 68, RULE_list_values);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 528;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & 1618762666312990721L) != 0)) {
					{
					State = 527;
					sub_expression(0);
					}
				}

				State = 534;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 530;
						Match(COMMA);
						State = 531;
						sub_expression(0);
						}
						} 
					}
					State = 536;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public Obj_valuesContext @values;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Obj_valuesContext obj_values() {
			return GetRuleContext<Obj_valuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 70, RULE_obj);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			Match(LEFT_BRACE);
			State = 540;
			_localctx.@values = obj_values();
			State = 542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 541;
				Match(COMMA);
				}
			}

			State = 544;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Obj_valuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Key_valueContext[] key_value() {
			return GetRuleContexts<Key_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_valueContext key_value(int i) {
			return GetRuleContext<Key_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		public Obj_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj_values; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterObj_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitObj_values(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj_values(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Obj_valuesContext obj_values() {
		Obj_valuesContext _localctx = new Obj_valuesContext(Context, State);
		EnterRule(_localctx, 72, RULE_obj_values);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 547;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRING || _la==ELEMENT) {
					{
					State = 546;
					key_value();
					}
				}

				State = 553;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 549;
						Match(COMMA);
						State = 550;
						key_value();
						}
						} 
					}
					State = 555;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_valueContext : ParserRuleContext {
		public Key_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_value; } }
	 
		public Key_valueContext() { }
		public virtual void CopyFrom(Key_valueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class String_keyContext : Key_valueContext {
		public IToken key;
		public Sub_expressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(sassy_parser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public String_keyContext(Key_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterString_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitString_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_key(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Literal_keyContext : Key_valueContext {
		public IToken key;
		public Sub_expressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Literal_keyContext(Key_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterLiteral_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitLiteral_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Key_valueContext key_value() {
		Key_valueContext _localctx = new Key_valueContext(Context, State);
		EnterRule(_localctx, 74, RULE_key_value);
		try {
			State = 564;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELEMENT:
				_localctx = new Literal_keyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 558;
				((Literal_keyContext)_localctx).key = Match(ELEMENT);
				State = 559;
				Match(COLON);
				State = 560;
				((Literal_keyContext)_localctx).val = sub_expression(0);
				}
				break;
			case STRING:
				_localctx = new String_keyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 561;
				((String_keyContext)_localctx).key = Match(STRING);
				State = 562;
				Match(COLON);
				State = 563;
				((String_keyContext)_localctx).val = sub_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 76, RULE_argument_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & 1618762666312990721L) != 0)) {
					{
					State = 566;
					argument();
					}
				}

				State = 573;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 569;
						Match(COMMA);
						State = 570;
						argument();
						}
						} 
					}
					State = 575;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
				}
				}
				break;
			}
			State = 579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 578;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Named_argumentContext : ArgumentContext {
		public IToken key;
		public Sub_expressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Named_argumentContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterNamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitNamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_argument(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Unnamed_argumentContext : ArgumentContext {
		public Sub_expressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Unnamed_argumentContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterUnnamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitUnnamed_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnnamed_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 78, RULE_argument);
		try {
			State = 585;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				_localctx = new Named_argumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 581;
				((Named_argumentContext)_localctx).key = Match(VARIABLE);
				State = 582;
				Match(COLON);
				State = 583;
				((Named_argumentContext)_localctx).val = sub_expression(0);
				}
				break;
			case 2:
				_localctx = new Unnamed_argumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 584;
				((Unnamed_argumentContext)_localctx).val = sub_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_decl_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(sassy_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(sassy_parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declContext[] arg_decl() {
			return GetRuleContexts<Arg_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declContext arg_decl(int i) {
			return GetRuleContext<Arg_declContext>(i);
		}
		public Arg_decl_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_decl_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArg_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArg_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg_decl_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arg_decl_listContext arg_decl_list() {
		Arg_decl_listContext _localctx = new Arg_decl_listContext(Context, State);
		EnterRule(_localctx, 80, RULE_arg_decl_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE) {
					{
					State = 587;
					arg_decl();
					}
				}

				State = 594;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 590;
						Match(COMMA);
						State = 591;
						arg_decl();
						}
						} 
					}
					State = 596;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
				}
				}
				break;
			}
			State = 600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 599;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_declContext : ParserRuleContext {
		public Arg_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_decl; } }
	 
		public Arg_declContext() { }
		public virtual void CopyFrom(Arg_declContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Argument_without_defaultContext : Arg_declContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		public Argument_without_defaultContext(Arg_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArgument_without_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArgument_without_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_without_default(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Argument_with_defaultContext : Arg_declContext {
		public IToken name;
		public Sub_expressionContext val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(sassy_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		public Argument_with_defaultContext(Arg_declContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterArgument_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitArgument_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_with_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arg_declContext arg_decl() {
		Arg_declContext _localctx = new Arg_declContext(Context, State);
		EnterRule(_localctx, 82, RULE_arg_decl);
		try {
			State = 606;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				_localctx = new Argument_without_defaultContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 602;
				((Argument_without_defaultContext)_localctx).name = Match(VARIABLE);
				}
				break;
			case 2:
				_localctx = new Argument_with_defaultContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 603;
				((Argument_with_defaultContext)_localctx).name = Match(VARIABLE);
				State = 604;
				Match(COLON);
				State = 605;
				((Argument_with_defaultContext)_localctx).val = sub_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 84, RULE_function_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305843009222100512L) != 0)) {
				{
				{
				State = 608;
				function_statement();
				}
				}
				State = 613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_conditionalContext fn_level_conditional() {
			return GetRuleContext<Fn_level_conditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_returnContext fn_return() {
			return GetRuleContext<Fn_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_loopContext for_loop() {
			return GetRuleContext<For_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Each_loopContext each_loop() {
			return GetRuleContext<Each_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext while_loop() {
			return GetRuleContext<While_loopContext>(0);
		}
		public Function_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFunction_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFunction_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_statementContext function_statement() {
		Function_statementContext _localctx = new Function_statementContext(Context, State);
		EnterRule(_localctx, 86, RULE_function_statement);
		try {
			State = 620;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 614;
				var_decl();
				}
				break;
			case PRE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 615;
				fn_level_conditional();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 616;
				fn_return();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 617;
				for_loop();
				}
				break;
			case EACH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 618;
				each_loop();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 619;
				while_loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_conditionalContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Function_statementContext body;
		public Fn_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_IF() { return GetToken(sassy_parser.PRE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_elseContext fn_level_else() {
			return GetRuleContext<Fn_level_elseContext>(0);
		}
		public Fn_level_conditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_conditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_conditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_conditionalContext fn_level_conditional() {
		Fn_level_conditionalContext _localctx = new Fn_level_conditionalContext(Context, State);
		EnterRule(_localctx, 88, RULE_fn_level_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			Match(PRE_IF);
			State = 623;
			_localctx.cond = sub_expression(0);
			State = 624;
			Match(LEFT_BRACE);
			State = 628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305843009222100512L) != 0)) {
				{
				{
				State = 625;
				_localctx.body = function_statement();
				}
				}
				State = 630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 631;
			Match(RIGHT_BRACE);
			State = 633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 632;
				_localctx.els = fn_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_else_elseContext fn_level_else_else() {
			return GetRuleContext<Fn_level_else_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_else_ifContext fn_level_else_if() {
			return GetRuleContext<Fn_level_else_ifContext>(0);
		}
		public Fn_level_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_elseContext fn_level_else() {
		Fn_level_elseContext _localctx = new Fn_level_elseContext(Context, State);
		EnterRule(_localctx, 90, RULE_fn_level_else);
		try {
			State = 637;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRE_ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 635;
				fn_level_else_else();
				}
				break;
			case PRE_ELSE_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 636;
				fn_level_else_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_else_elseContext : ParserRuleContext {
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE() { return GetToken(sassy_parser.PRE_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Fn_level_else_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_else_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_else_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_else_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_else_elseContext fn_level_else_else() {
		Fn_level_else_elseContext _localctx = new Fn_level_else_elseContext(Context, State);
		EnterRule(_localctx, 92, RULE_fn_level_else_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			Match(PRE_ELSE);
			State = 640;
			Match(LEFT_BRACE);
			State = 644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305843009222100512L) != 0)) {
				{
				{
				State = 641;
				_localctx.body = function_statement();
				}
				}
				State = 646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 647;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_level_else_ifContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Function_statementContext body;
		public Fn_level_elseContext els;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRE_ELSE_IF() { return GetToken(sassy_parser.PRE_ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_level_elseContext fn_level_else() {
			return GetRuleContext<Fn_level_elseContext>(0);
		}
		public Fn_level_else_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_level_else_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_level_else_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_level_else_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_level_else_ifContext fn_level_else_if() {
		Fn_level_else_ifContext _localctx = new Fn_level_else_ifContext(Context, State);
		EnterRule(_localctx, 94, RULE_fn_level_else_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			Match(PRE_ELSE_IF);
			State = 650;
			_localctx.cond = sub_expression(0);
			State = 651;
			Match(LEFT_BRACE);
			State = 655;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305843009222100512L) != 0)) {
				{
				{
				State = 652;
				_localctx.body = function_statement();
				}
				}
				State = 657;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 658;
			Match(RIGHT_BRACE);
			State = 660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRE_ELSE || _la==PRE_ELSE_IF) {
				{
				State = 659;
				_localctx.els = fn_level_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(sassy_parser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(sassy_parser.SEMICOLON, 0); }
		public Fn_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFn_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFn_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFn_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fn_returnContext fn_return() {
		Fn_returnContext _localctx = new Fn_returnContext(Context, State);
		EnterRule(_localctx, 96, RULE_fn_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662;
			Match(RETURN);
			State = 663;
			sub_expression(0);
			State = 664;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixin_includeContext : ParserRuleContext {
		public IToken mixin;
		public Argument_listContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(sassy_parser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(sassy_parser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(sassy_parser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENT() { return GetToken(sassy_parser.ELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Mixin_includeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixin_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterMixin_include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitMixin_include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMixin_include(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mixin_includeContext mixin_include() {
		Mixin_includeContext _localctx = new Mixin_includeContext(Context, State);
		EnterRule(_localctx, 98, RULE_mixin_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666;
			Match(INCLUDE);
			State = 667;
			_localctx.mixin = Match(ELEMENT);
			State = 668;
			Match(LEFT_PAREN);
			State = 669;
			_localctx.args = argument_list();
			State = 670;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_loopContext : ParserRuleContext {
		public For_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_loop; } }
	 
		public For_loopContext() { }
		public virtual void CopyFrom(For_loopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class For_to_loopContext : For_loopContext {
		public IToken idx;
		public Sub_expressionContext start;
		public Sub_expressionContext end;
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(sassy_parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(sassy_parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(sassy_parser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public For_to_loopContext(For_loopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFor_to_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFor_to_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_to_loop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class For_through_loopContext : For_loopContext {
		public IToken idx;
		public Sub_expressionContext start;
		public Sub_expressionContext end;
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(sassy_parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(sassy_parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROUGH() { return GetToken(sassy_parser.THROUGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(sassy_parser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext[] sub_expression() {
			return GetRuleContexts<Sub_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression(int i) {
			return GetRuleContext<Sub_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public For_through_loopContext(For_loopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterFor_through_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitFor_through_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_through_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_loopContext for_loop() {
		For_loopContext _localctx = new For_loopContext(Context, State);
		EnterRule(_localctx, 100, RULE_for_loop);
		int _la;
		try {
			State = 702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				_localctx = new For_to_loopContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 672;
				Match(FOR);
				State = 673;
				((For_to_loopContext)_localctx).idx = Match(VARIABLE);
				State = 674;
				Match(FROM);
				State = 675;
				((For_to_loopContext)_localctx).start = sub_expression(0);
				State = 676;
				Match(TO);
				State = 677;
				((For_to_loopContext)_localctx).end = sub_expression(0);
				State = 678;
				Match(LEFT_BRACE);
				State = 682;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305843009222100512L) != 0)) {
					{
					{
					State = 679;
					((For_to_loopContext)_localctx).body = function_statement();
					}
					}
					State = 684;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 685;
				Match(RIGHT_BRACE);
				}
				break;
			case 2:
				_localctx = new For_through_loopContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 687;
				Match(FOR);
				State = 688;
				((For_through_loopContext)_localctx).idx = Match(VARIABLE);
				State = 689;
				Match(FROM);
				State = 690;
				((For_through_loopContext)_localctx).start = sub_expression(0);
				State = 691;
				Match(THROUGH);
				State = 692;
				((For_through_loopContext)_localctx).end = sub_expression(0);
				State = 693;
				Match(LEFT_BRACE);
				State = 697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305843009222100512L) != 0)) {
					{
					{
					State = 694;
					((For_through_loopContext)_localctx).body = function_statement();
					}
					}
					State = 699;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 700;
				Match(RIGHT_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Each_loopContext : ParserRuleContext {
		public IToken key;
		public IToken val;
		public Sub_expressionContext iter;
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(sassy_parser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(sassy_parser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(sassy_parser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(sassy_parser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(sassy_parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public Each_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_each_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterEach_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitEach_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEach_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Each_loopContext each_loop() {
		Each_loopContext _localctx = new Each_loopContext(Context, State);
		EnterRule(_localctx, 102, RULE_each_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704;
			Match(EACH);
			State = 707;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 705;
				_localctx.key = Match(VARIABLE);
				State = 706;
				Match(COMMA);
				}
				break;
			}
			State = 709;
			_localctx.val = Match(VARIABLE);
			State = 710;
			Match(IN);
			State = 711;
			_localctx.iter = sub_expression(0);
			State = 712;
			Match(LEFT_BRACE);
			State = 716;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305843009222100512L) != 0)) {
				{
				{
				State = 713;
				_localctx.body = function_statement();
				}
				}
				State = 718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 719;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		public Sub_expressionContext cond;
		public Function_statementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(sassy_parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACE() { return GetToken(sassy_parser.LEFT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACE() { return GetToken(sassy_parser.RIGHT_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sub_expressionContext sub_expression() {
			return GetRuleContext<Sub_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext[] function_statement() {
			return GetRuleContexts<Function_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_statementContext function_statement(int i) {
			return GetRuleContext<Function_statementContext>(i);
		}
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Isassy_parserListener typedListener = listener as Isassy_parserListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Isassy_parserVisitor<TResult> typedVisitor = visitor as Isassy_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 104, RULE_while_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			Match(WHILE);
			State = 722;
			_localctx.cond = sub_expression(0);
			State = 723;
			Match(LEFT_BRACE);
			State = 727;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305843009222100512L) != 0)) {
				{
				{
				State = 724;
				_localctx.body = function_statement();
				}
				}
				State = 729;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 730;
			Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return selector_sempred((SelectorContext)_localctx, predIndex);
		case 18: return selector_no_children_sempred((Selector_no_childrenContext)_localctx, predIndex);
		case 31: return sub_expression_sempred((Sub_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool selector_sempred(SelectorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		}
		return true;
	}
	private bool selector_no_children_sempred(Selector_no_childrenContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		}
		return true;
	}
	private bool sub_expression_sempred(Sub_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 14);
		case 6: return Precpred(Context, 13);
		case 7: return Precpred(Context, 12);
		case 8: return Precpred(Context, 11);
		case 9: return Precpred(Context, 10);
		case 10: return Precpred(Context, 9);
		case 11: return Precpred(Context, 8);
		case 12: return Precpred(Context, 7);
		case 13: return Precpred(Context, 6);
		case 14: return Precpred(Context, 5);
		case 15: return Precpred(Context, 4);
		case 16: return Precpred(Context, 3);
		case 17: return Precpred(Context, 2);
		case 18: return Precpred(Context, 1);
		case 19: return Precpred(Context, 17);
		case 20: return Precpred(Context, 16);
		case 21: return Precpred(Context, 15);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,64,733,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,1,0,4,0,108,8,0,11,0,12,0,109,1,0,1,0,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,122,8,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
		5,3,131,8,3,10,3,12,3,134,9,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,
		1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,173,8,9,10,9,12,9,176,9,9,1,
		9,1,9,3,9,180,8,9,1,10,1,10,3,10,184,8,10,1,11,1,11,1,11,5,11,189,8,11,
		10,11,12,11,192,9,11,1,11,1,11,1,12,1,12,1,12,1,12,5,12,200,8,12,10,12,
		12,12,203,9,12,1,12,1,12,3,12,207,8,12,1,13,1,13,1,13,1,13,1,13,1,14,5,
		14,215,8,14,10,14,12,14,218,9,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,3,15,230,8,15,1,16,1,16,1,16,1,16,5,16,236,8,16,10,16,12,
		16,239,9,16,3,16,241,8,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,261,8,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,5,17,271,8,17,10,17,12,17,274,9,17,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,3,18,292,8,18,1,18,1,18,1,18,1,18,1,18,5,18,299,8,18,10,18,12,18,302,
		9,18,1,19,5,19,305,8,19,10,19,12,19,308,9,19,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,3,20,318,8,20,1,21,1,21,1,21,1,21,5,21,324,8,21,10,21,12,
		21,327,9,21,1,21,1,21,3,21,331,8,21,1,22,1,22,3,22,335,8,22,1,23,1,23,
		1,23,5,23,340,8,23,10,23,12,23,343,9,23,1,23,1,23,1,24,1,24,1,24,1,24,
		5,24,351,8,24,10,24,12,24,354,9,24,1,24,1,24,3,24,358,8,24,1,25,1,25,1,
		25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,3,28,373,8,28,1,28,
		1,28,1,28,1,28,1,28,1,28,3,28,381,8,28,1,28,1,28,1,28,1,28,3,28,387,8,
		28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,401,
		8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,412,8,30,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,1,31,3,31,433,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,
		498,8,31,10,31,12,31,501,9,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
		1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,519,8,32,1,33,1,33,1,33,3,
		33,524,8,33,1,33,1,33,1,34,3,34,529,8,34,1,34,1,34,5,34,533,8,34,10,34,
		12,34,536,9,34,3,34,538,8,34,1,35,1,35,1,35,3,35,543,8,35,1,35,1,35,1,
		36,3,36,548,8,36,1,36,1,36,5,36,552,8,36,10,36,12,36,555,9,36,3,36,557,
		8,36,1,37,1,37,1,37,1,37,1,37,1,37,3,37,565,8,37,1,38,3,38,568,8,38,1,
		38,1,38,5,38,572,8,38,10,38,12,38,575,9,38,3,38,577,8,38,1,38,3,38,580,
		8,38,1,39,1,39,1,39,1,39,3,39,586,8,39,1,40,3,40,589,8,40,1,40,1,40,5,
		40,593,8,40,10,40,12,40,596,9,40,3,40,598,8,40,1,40,3,40,601,8,40,1,41,
		1,41,1,41,1,41,3,41,607,8,41,1,42,5,42,610,8,42,10,42,12,42,613,9,42,1,
		43,1,43,1,43,1,43,1,43,1,43,3,43,621,8,43,1,44,1,44,1,44,1,44,5,44,627,
		8,44,10,44,12,44,630,9,44,1,44,1,44,3,44,634,8,44,1,45,1,45,3,45,638,8,
		45,1,46,1,46,1,46,5,46,643,8,46,10,46,12,46,646,9,46,1,46,1,46,1,47,1,
		47,1,47,1,47,5,47,654,8,47,10,47,12,47,657,9,47,1,47,1,47,3,47,661,8,47,
		1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,1,50,5,50,681,8,50,10,50,12,50,684,9,50,1,50,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,696,8,50,10,50,12,50,699,9,50,
		1,50,1,50,3,50,703,8,50,1,51,1,51,1,51,3,51,708,8,51,1,51,1,51,1,51,1,
		51,1,51,5,51,715,8,51,10,51,12,51,718,9,51,1,51,1,51,1,52,1,52,1,52,1,
		52,5,52,726,8,52,10,52,12,52,729,9,52,1,52,1,52,1,52,0,3,34,36,62,53,0,
		2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
		52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
		100,102,104,0,0,814,0,107,1,0,0,0,2,121,1,0,0,0,4,123,1,0,0,0,6,127,1,
		0,0,0,8,135,1,0,0,0,10,139,1,0,0,0,12,144,1,0,0,0,14,150,1,0,0,0,16,159,
		1,0,0,0,18,168,1,0,0,0,20,183,1,0,0,0,22,185,1,0,0,0,24,195,1,0,0,0,26,
		208,1,0,0,0,28,216,1,0,0,0,30,229,1,0,0,0,32,231,1,0,0,0,34,260,1,0,0,
		0,36,291,1,0,0,0,38,306,1,0,0,0,40,317,1,0,0,0,42,319,1,0,0,0,44,334,1,
		0,0,0,46,336,1,0,0,0,48,346,1,0,0,0,50,359,1,0,0,0,52,363,1,0,0,0,54,366,
		1,0,0,0,56,386,1,0,0,0,58,400,1,0,0,0,60,411,1,0,0,0,62,432,1,0,0,0,64,
		518,1,0,0,0,66,520,1,0,0,0,68,537,1,0,0,0,70,539,1,0,0,0,72,556,1,0,0,
		0,74,564,1,0,0,0,76,576,1,0,0,0,78,585,1,0,0,0,80,597,1,0,0,0,82,606,1,
		0,0,0,84,611,1,0,0,0,86,620,1,0,0,0,88,622,1,0,0,0,90,637,1,0,0,0,92,639,
		1,0,0,0,94,649,1,0,0,0,96,662,1,0,0,0,98,666,1,0,0,0,100,702,1,0,0,0,102,
		704,1,0,0,0,104,721,1,0,0,0,106,108,3,2,1,0,107,106,1,0,0,0,108,109,1,
		0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,111,1,0,0,0,111,112,5,0,0,1,
		112,1,1,0,0,0,113,122,3,8,4,0,114,122,3,10,5,0,115,122,3,12,6,0,116,122,
		3,14,7,0,117,122,3,16,8,0,118,122,3,18,9,0,119,122,3,26,13,0,120,122,3,
		4,2,0,121,113,1,0,0,0,121,114,1,0,0,0,121,115,1,0,0,0,121,116,1,0,0,0,
		121,117,1,0,0,0,121,118,1,0,0,0,121,119,1,0,0,0,121,120,1,0,0,0,122,3,
		1,0,0,0,123,124,5,24,0,0,124,125,3,6,3,0,125,126,5,32,0,0,126,5,1,0,0,
		0,127,132,5,57,0,0,128,129,5,34,0,0,129,131,5,57,0,0,130,128,1,0,0,0,131,
		134,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,7,1,0,0,0,134,132,1,0,
		0,0,135,136,5,3,0,0,136,137,5,57,0,0,137,138,5,32,0,0,138,9,1,0,0,0,139,
		140,5,61,0,0,140,141,5,33,0,0,141,142,3,60,30,0,142,143,5,32,0,0,143,11,
		1,0,0,0,144,145,5,21,0,0,145,146,5,57,0,0,146,147,5,34,0,0,147,148,5,56,
		0,0,148,149,5,32,0,0,149,13,1,0,0,0,150,151,5,4,0,0,151,152,5,64,0,0,152,
		153,5,28,0,0,153,154,3,80,40,0,154,155,5,29,0,0,155,156,5,26,0,0,156,157,
		3,84,42,0,157,158,5,27,0,0,158,15,1,0,0,0,159,160,5,8,0,0,160,161,5,64,
		0,0,161,162,5,28,0,0,162,163,3,80,40,0,163,164,5,29,0,0,164,165,5,26,0,
		0,165,166,3,38,19,0,166,167,5,27,0,0,167,17,1,0,0,0,168,169,5,5,0,0,169,
		170,3,62,31,0,170,174,5,26,0,0,171,173,3,2,1,0,172,171,1,0,0,0,173,176,
		1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,177,1,0,0,0,176,174,1,0,0,
		0,177,179,5,27,0,0,178,180,3,20,10,0,179,178,1,0,0,0,179,180,1,0,0,0,180,
		19,1,0,0,0,181,184,3,22,11,0,182,184,3,24,12,0,183,181,1,0,0,0,183,182,
		1,0,0,0,184,21,1,0,0,0,185,186,5,6,0,0,186,190,5,26,0,0,187,189,3,2,1,
		0,188,187,1,0,0,0,189,192,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,
		193,1,0,0,0,192,190,1,0,0,0,193,194,5,27,0,0,194,23,1,0,0,0,195,196,5,
		7,0,0,196,197,3,62,31,0,197,201,5,26,0,0,198,200,3,2,1,0,199,198,1,0,0,
		0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,204,1,0,0,0,203,
		201,1,0,0,0,204,206,5,27,0,0,205,207,3,20,10,0,206,205,1,0,0,0,206,207,
		1,0,0,0,207,25,1,0,0,0,208,209,3,28,14,0,209,210,5,26,0,0,210,211,3,38,
		19,0,211,212,5,27,0,0,212,27,1,0,0,0,213,215,3,30,15,0,214,213,1,0,0,0,
		215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,219,1,0,0,0,218,216,
		1,0,0,0,219,220,3,34,17,0,220,29,1,0,0,0,221,222,5,18,0,0,222,230,5,57,
		0,0,223,224,5,19,0,0,224,230,5,57,0,0,225,226,5,20,0,0,226,230,5,57,0,
		0,227,228,5,25,0,0,228,230,3,32,16,0,229,221,1,0,0,0,229,223,1,0,0,0,229,
		225,1,0,0,0,229,227,1,0,0,0,230,31,1,0,0,0,231,240,5,28,0,0,232,237,3,
		60,30,0,233,234,5,34,0,0,234,236,3,60,30,0,235,233,1,0,0,0,236,239,1,0,
		0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,240,
		232,1,0,0,0,240,241,1,0,0,0,241,242,1,0,0,0,242,243,5,29,0,0,243,33,1,
		0,0,0,244,245,6,17,-1,0,245,261,5,64,0,0,246,261,5,60,0,0,247,261,5,59,
		0,0,248,261,5,63,0,0,249,250,5,28,0,0,250,251,3,34,17,0,251,252,5,29,0,
		0,252,261,1,0,0,0,253,254,5,35,0,0,254,261,5,64,0,0,255,256,5,51,0,0,256,
		261,5,60,0,0,257,258,5,51,0,0,258,261,5,59,0,0,259,261,5,37,0,0,260,244,
		1,0,0,0,260,246,1,0,0,0,260,247,1,0,0,0,260,248,1,0,0,0,260,249,1,0,0,
		0,260,253,1,0,0,0,260,255,1,0,0,0,260,257,1,0,0,0,260,259,1,0,0,0,261,
		272,1,0,0,0,262,263,10,7,0,0,263,264,5,34,0,0,264,271,3,36,18,0,265,266,
		10,6,0,0,266,267,5,41,0,0,267,271,3,36,18,0,268,269,10,5,0,0,269,271,3,
		36,18,0,270,262,1,0,0,0,270,265,1,0,0,0,270,268,1,0,0,0,271,274,1,0,0,
		0,272,270,1,0,0,0,272,273,1,0,0,0,273,35,1,0,0,0,274,272,1,0,0,0,275,276,
		6,18,-1,0,276,292,5,64,0,0,277,292,5,60,0,0,278,292,5,59,0,0,279,292,5,
		63,0,0,280,281,5,28,0,0,281,282,3,36,18,0,282,283,5,29,0,0,283,292,1,0,
		0,0,284,285,5,35,0,0,285,292,5,64,0,0,286,287,5,51,0,0,287,292,5,60,0,
		0,288,289,5,51,0,0,289,292,5,59,0,0,290,292,5,37,0,0,291,275,1,0,0,0,291,
		277,1,0,0,0,291,278,1,0,0,0,291,279,1,0,0,0,291,280,1,0,0,0,291,284,1,
		0,0,0,291,286,1,0,0,0,291,288,1,0,0,0,291,290,1,0,0,0,292,300,1,0,0,0,
		293,294,10,6,0,0,294,295,5,34,0,0,295,299,3,36,18,7,296,297,10,5,0,0,297,
		299,3,36,18,6,298,293,1,0,0,0,298,296,1,0,0,0,299,302,1,0,0,0,300,298,
		1,0,0,0,300,301,1,0,0,0,301,37,1,0,0,0,302,300,1,0,0,0,303,305,3,40,20,
		0,304,303,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,
		39,1,0,0,0,308,306,1,0,0,0,309,318,3,10,5,0,310,318,3,42,21,0,311,318,
		3,50,25,0,312,318,3,52,26,0,313,318,3,54,27,0,314,318,3,56,28,0,315,318,
		3,26,13,0,316,318,3,98,49,0,317,309,1,0,0,0,317,310,1,0,0,0,317,311,1,
		0,0,0,317,312,1,0,0,0,317,313,1,0,0,0,317,314,1,0,0,0,317,315,1,0,0,0,
		317,316,1,0,0,0,318,41,1,0,0,0,319,320,5,5,0,0,320,321,3,62,31,0,321,325,
		5,26,0,0,322,324,3,40,20,0,323,322,1,0,0,0,324,327,1,0,0,0,325,323,1,0,
		0,0,325,326,1,0,0,0,326,328,1,0,0,0,327,325,1,0,0,0,328,330,5,27,0,0,329,
		331,3,44,22,0,330,329,1,0,0,0,330,331,1,0,0,0,331,43,1,0,0,0,332,335,3,
		46,23,0,333,335,3,48,24,0,334,332,1,0,0,0,334,333,1,0,0,0,335,45,1,0,0,
		0,336,337,5,6,0,0,337,341,5,26,0,0,338,340,3,40,20,0,339,338,1,0,0,0,340,
		343,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,341,1,
		0,0,0,344,345,5,27,0,0,345,47,1,0,0,0,346,347,5,7,0,0,347,348,3,62,31,
		0,348,352,5,26,0,0,349,351,3,40,20,0,350,349,1,0,0,0,351,354,1,0,0,0,352,
		350,1,0,0,0,352,353,1,0,0,0,353,355,1,0,0,0,354,352,1,0,0,0,355,357,5,
		27,0,0,356,358,3,44,22,0,357,356,1,0,0,0,357,358,1,0,0,0,358,49,1,0,0,
		0,359,360,5,16,0,0,360,361,3,60,30,0,361,362,5,32,0,0,362,51,1,0,0,0,363,
		364,5,58,0,0,364,365,5,32,0,0,365,53,1,0,0,0,366,367,5,17,0,0,367,368,
		3,62,31,0,368,369,5,32,0,0,369,55,1,0,0,0,370,372,5,64,0,0,371,373,3,58,
		29,0,372,371,1,0,0,0,372,373,1,0,0,0,373,374,1,0,0,0,374,375,5,33,0,0,
		375,376,3,60,30,0,376,377,5,32,0,0,377,387,1,0,0,0,378,380,5,57,0,0,379,
		381,3,58,29,0,380,379,1,0,0,0,380,381,1,0,0,0,381,382,1,0,0,0,382,383,
		5,33,0,0,383,384,3,60,30,0,384,385,5,32,0,0,385,387,1,0,0,0,386,370,1,
		0,0,0,386,378,1,0,0,0,387,57,1,0,0,0,388,389,5,30,0,0,389,390,5,56,0,0,
		390,401,5,31,0,0,391,392,5,30,0,0,392,393,5,64,0,0,393,401,5,31,0,0,394,
		395,5,30,0,0,395,396,5,60,0,0,396,401,5,31,0,0,397,398,5,30,0,0,398,399,
		5,57,0,0,399,401,5,31,0,0,400,388,1,0,0,0,400,391,1,0,0,0,400,394,1,0,
		0,0,400,397,1,0,0,0,401,59,1,0,0,0,402,403,5,35,0,0,403,412,3,62,31,0,
		404,405,5,36,0,0,405,412,3,62,31,0,406,407,5,37,0,0,407,412,3,62,31,0,
		408,409,5,38,0,0,409,412,3,62,31,0,410,412,3,62,31,0,411,402,1,0,0,0,411,
		404,1,0,0,0,411,406,1,0,0,0,411,408,1,0,0,0,411,410,1,0,0,0,412,61,1,0,
		0,0,413,414,6,31,-1,0,414,433,3,64,32,0,415,433,5,61,0,0,416,433,5,62,
		0,0,417,418,5,28,0,0,418,419,3,62,31,0,419,420,5,29,0,0,420,433,1,0,0,
		0,421,422,5,36,0,0,422,433,3,62,31,21,423,424,5,35,0,0,424,433,3,62,31,
		20,425,426,5,40,0,0,426,433,3,62,31,19,427,428,5,64,0,0,428,429,5,28,0,
		0,429,430,3,76,38,0,430,431,5,29,0,0,431,433,1,0,0,0,432,413,1,0,0,0,432,
		415,1,0,0,0,432,416,1,0,0,0,432,417,1,0,0,0,432,421,1,0,0,0,432,423,1,
		0,0,0,432,425,1,0,0,0,432,427,1,0,0,0,433,499,1,0,0,0,434,435,10,14,0,
		0,435,436,5,37,0,0,436,498,3,62,31,15,437,438,10,13,0,0,438,439,5,38,0,
		0,439,498,3,62,31,14,440,441,10,12,0,0,441,442,5,39,0,0,442,498,3,62,31,
		13,443,444,10,11,0,0,444,445,5,35,0,0,445,498,3,62,31,12,446,447,10,10,
		0,0,447,448,5,36,0,0,448,498,3,62,31,11,449,450,10,9,0,0,450,451,5,41,
		0,0,451,498,3,62,31,10,452,453,10,8,0,0,453,454,5,43,0,0,454,498,3,62,
		31,9,455,456,10,7,0,0,456,457,5,42,0,0,457,498,3,62,31,8,458,459,10,6,
		0,0,459,460,5,44,0,0,460,498,3,62,31,7,461,462,10,5,0,0,462,463,5,45,0,
		0,463,498,3,62,31,6,464,465,10,4,0,0,465,466,5,46,0,0,466,498,3,62,31,
		5,467,468,10,3,0,0,468,469,5,47,0,0,469,498,3,62,31,4,470,471,10,2,0,0,
		471,472,5,48,0,0,472,498,3,62,31,3,473,474,10,1,0,0,474,475,5,49,0,0,475,
		476,3,62,31,0,476,477,5,50,0,0,477,478,3,62,31,2,478,498,1,0,0,0,479,480,
		10,17,0,0,480,481,5,33,0,0,481,482,5,64,0,0,482,483,5,28,0,0,483,484,3,
		76,38,0,484,485,5,29,0,0,485,498,1,0,0,0,486,487,10,16,0,0,487,488,5,63,
		0,0,488,489,5,28,0,0,489,490,3,76,38,0,490,491,5,29,0,0,491,498,1,0,0,
		0,492,493,10,15,0,0,493,494,5,30,0,0,494,495,3,62,31,0,495,496,5,31,0,
		0,496,498,1,0,0,0,497,434,1,0,0,0,497,437,1,0,0,0,497,440,1,0,0,0,497,
		443,1,0,0,0,497,446,1,0,0,0,497,449,1,0,0,0,497,452,1,0,0,0,497,455,1,
		0,0,0,497,458,1,0,0,0,497,461,1,0,0,0,497,464,1,0,0,0,497,467,1,0,0,0,
		497,470,1,0,0,0,497,473,1,0,0,0,497,479,1,0,0,0,497,486,1,0,0,0,497,492,
		1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,63,1,0,0,0,
		501,499,1,0,0,0,502,519,5,58,0,0,503,519,5,53,0,0,504,519,5,54,0,0,505,
		519,5,56,0,0,506,519,5,57,0,0,507,519,5,52,0,0,508,509,5,4,0,0,509,510,
		5,28,0,0,510,511,3,80,40,0,511,512,5,29,0,0,512,513,5,26,0,0,513,514,3,
		84,42,0,514,515,5,27,0,0,515,519,1,0,0,0,516,519,3,66,33,0,517,519,3,70,
		35,0,518,502,1,0,0,0,518,503,1,0,0,0,518,504,1,0,0,0,518,505,1,0,0,0,518,
		506,1,0,0,0,518,507,1,0,0,0,518,508,1,0,0,0,518,516,1,0,0,0,518,517,1,
		0,0,0,519,65,1,0,0,0,520,521,5,30,0,0,521,523,3,68,34,0,522,524,5,34,0,
		0,523,522,1,0,0,0,523,524,1,0,0,0,524,525,1,0,0,0,525,526,5,31,0,0,526,
		67,1,0,0,0,527,529,3,62,31,0,528,527,1,0,0,0,528,529,1,0,0,0,529,534,1,
		0,0,0,530,531,5,34,0,0,531,533,3,62,31,0,532,530,1,0,0,0,533,536,1,0,0,
		0,534,532,1,0,0,0,534,535,1,0,0,0,535,538,1,0,0,0,536,534,1,0,0,0,537,
		528,1,0,0,0,537,538,1,0,0,0,538,69,1,0,0,0,539,540,5,26,0,0,540,542,3,
		72,36,0,541,543,5,34,0,0,542,541,1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,
		0,544,545,5,27,0,0,545,71,1,0,0,0,546,548,3,74,37,0,547,546,1,0,0,0,547,
		548,1,0,0,0,548,553,1,0,0,0,549,550,5,34,0,0,550,552,3,74,37,0,551,549,
		1,0,0,0,552,555,1,0,0,0,553,551,1,0,0,0,553,554,1,0,0,0,554,557,1,0,0,
		0,555,553,1,0,0,0,556,547,1,0,0,0,556,557,1,0,0,0,557,73,1,0,0,0,558,559,
		5,64,0,0,559,560,5,33,0,0,560,565,3,62,31,0,561,562,5,57,0,0,562,563,5,
		33,0,0,563,565,3,62,31,0,564,558,1,0,0,0,564,561,1,0,0,0,565,75,1,0,0,
		0,566,568,3,78,39,0,567,566,1,0,0,0,567,568,1,0,0,0,568,573,1,0,0,0,569,
		570,5,34,0,0,570,572,3,78,39,0,571,569,1,0,0,0,572,575,1,0,0,0,573,571,
		1,0,0,0,573,574,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,576,567,1,0,0,
		0,576,577,1,0,0,0,577,579,1,0,0,0,578,580,5,34,0,0,579,578,1,0,0,0,579,
		580,1,0,0,0,580,77,1,0,0,0,581,582,5,61,0,0,582,583,5,33,0,0,583,586,3,
		62,31,0,584,586,3,62,31,0,585,581,1,0,0,0,585,584,1,0,0,0,586,79,1,0,0,
		0,587,589,3,82,41,0,588,587,1,0,0,0,588,589,1,0,0,0,589,594,1,0,0,0,590,
		591,5,34,0,0,591,593,3,82,41,0,592,590,1,0,0,0,593,596,1,0,0,0,594,592,
		1,0,0,0,594,595,1,0,0,0,595,598,1,0,0,0,596,594,1,0,0,0,597,588,1,0,0,
		0,597,598,1,0,0,0,598,600,1,0,0,0,599,601,5,34,0,0,600,599,1,0,0,0,600,
		601,1,0,0,0,601,81,1,0,0,0,602,607,5,61,0,0,603,604,5,61,0,0,604,605,5,
		33,0,0,605,607,3,62,31,0,606,602,1,0,0,0,606,603,1,0,0,0,607,83,1,0,0,
		0,608,610,3,86,43,0,609,608,1,0,0,0,610,613,1,0,0,0,611,609,1,0,0,0,611,
		612,1,0,0,0,612,85,1,0,0,0,613,611,1,0,0,0,614,621,3,10,5,0,615,621,3,
		88,44,0,616,621,3,96,48,0,617,621,3,100,50,0,618,621,3,102,51,0,619,621,
		3,104,52,0,620,614,1,0,0,0,620,615,1,0,0,0,620,616,1,0,0,0,620,617,1,0,
		0,0,620,618,1,0,0,0,620,619,1,0,0,0,621,87,1,0,0,0,622,623,5,5,0,0,623,
		624,3,62,31,0,624,628,5,26,0,0,625,627,3,86,43,0,626,625,1,0,0,0,627,630,
		1,0,0,0,628,626,1,0,0,0,628,629,1,0,0,0,629,631,1,0,0,0,630,628,1,0,0,
		0,631,633,5,27,0,0,632,634,3,90,45,0,633,632,1,0,0,0,633,634,1,0,0,0,634,
		89,1,0,0,0,635,638,3,92,46,0,636,638,3,94,47,0,637,635,1,0,0,0,637,636,
		1,0,0,0,638,91,1,0,0,0,639,640,5,6,0,0,640,644,5,26,0,0,641,643,3,86,43,
		0,642,641,1,0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,644,645,1,0,0,0,645,
		647,1,0,0,0,646,644,1,0,0,0,647,648,5,27,0,0,648,93,1,0,0,0,649,650,5,
		7,0,0,650,651,3,62,31,0,651,655,5,26,0,0,652,654,3,86,43,0,653,652,1,0,
		0,0,654,657,1,0,0,0,655,653,1,0,0,0,655,656,1,0,0,0,656,658,1,0,0,0,657,
		655,1,0,0,0,658,660,5,27,0,0,659,661,3,90,45,0,660,659,1,0,0,0,660,661,
		1,0,0,0,661,95,1,0,0,0,662,663,5,23,0,0,663,664,3,62,31,0,664,665,5,32,
		0,0,665,97,1,0,0,0,666,667,5,22,0,0,667,668,5,64,0,0,668,669,5,28,0,0,
		669,670,3,76,38,0,670,671,5,29,0,0,671,99,1,0,0,0,672,673,5,10,0,0,673,
		674,5,61,0,0,674,675,5,11,0,0,675,676,3,62,31,0,676,677,5,13,0,0,677,678,
		3,62,31,0,678,682,5,26,0,0,679,681,3,86,43,0,680,679,1,0,0,0,681,684,1,
		0,0,0,682,680,1,0,0,0,682,683,1,0,0,0,683,685,1,0,0,0,684,682,1,0,0,0,
		685,686,5,27,0,0,686,703,1,0,0,0,687,688,5,10,0,0,688,689,5,61,0,0,689,
		690,5,11,0,0,690,691,3,62,31,0,691,692,5,12,0,0,692,693,3,62,31,0,693,
		697,5,26,0,0,694,696,3,86,43,0,695,694,1,0,0,0,696,699,1,0,0,0,697,695,
		1,0,0,0,697,698,1,0,0,0,698,700,1,0,0,0,699,697,1,0,0,0,700,701,5,27,0,
		0,701,703,1,0,0,0,702,672,1,0,0,0,702,687,1,0,0,0,703,101,1,0,0,0,704,
		707,5,14,0,0,705,706,5,61,0,0,706,708,5,34,0,0,707,705,1,0,0,0,707,708,
		1,0,0,0,708,709,1,0,0,0,709,710,5,61,0,0,710,711,5,15,0,0,711,712,3,62,
		31,0,712,716,5,26,0,0,713,715,3,86,43,0,714,713,1,0,0,0,715,718,1,0,0,
		0,716,714,1,0,0,0,716,717,1,0,0,0,717,719,1,0,0,0,718,716,1,0,0,0,719,
		720,5,27,0,0,720,103,1,0,0,0,721,722,5,9,0,0,722,723,3,62,31,0,723,727,
		5,26,0,0,724,726,3,86,43,0,725,724,1,0,0,0,726,729,1,0,0,0,727,725,1,0,
		0,0,727,728,1,0,0,0,728,730,1,0,0,0,729,727,1,0,0,0,730,731,5,27,0,0,731,
		105,1,0,0,0,69,109,121,132,174,179,183,190,201,206,216,229,237,240,260,
		270,272,291,298,300,306,317,325,330,334,341,352,357,372,380,386,400,411,
		432,497,499,518,523,528,534,537,542,547,553,556,564,567,573,576,579,585,
		588,594,597,600,606,611,620,628,633,637,644,655,660,682,697,702,707,716,
		727
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SassyPatchGrammar
